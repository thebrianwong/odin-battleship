(()=>{"use strict";const t=(()=>{const t=t=>{const o=["A","B","C","D","E","F","G","H","I","J"],i=["1","2","3","4","5","6","7","8","9","10"],d=a.getPlayers()[0];for(let n=-1;n<10;n++)for(let l=-1;l<10;l++)if(-1===n)if(-1===l){const e=document.createElement("div");e.classList.add("gameboard-label"),e.style.visibility="hidden",t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("column-label"),e.textContent=o[l],t.appendChild(e)}else if(-1===l){const e=document.createElement("div");e.classList.add("row-label"),e.textContent=i[n],t.appendChild(e)}else if(Array.from(t.classList).includes("player-board")){const a=document.createElement("div");a.setAttribute("data-row",n),a.setAttribute("data-column",l),a.classList.add("gameboard-cell"),a.addEventListener("dragover",(t=>{s(t)})),a.addEventListener("drop",(t=>{r(t),5===d.getGameboard().getPlacedShips().length&&e("enable")})),t.appendChild(a)}else if(Array.from(t.classList).includes("opponent-board")){const e=document.createElement("button");e.setAttribute("data-row",n),e.setAttribute("data-column",l),e.classList.add("gameboard-cell"),e.disabled=!0,e.addEventListener("click",(()=>{if(!a.isMidAttack()){console.log(e);const t=Number(e.dataset.row),a=Number(e.dataset.column);d.sendAttack([t,a])}})),t.appendChild(e)}},e=t=>{const e=document.querySelector(".opponent-board"),a=Array.from(e.querySelectorAll(".gameboard-cell"));"enable"===t?a.forEach((t=>{t.disabled=!1})):"disable"===t&&a.forEach((t=>{t.disabled=!0}))},s=t=>{t.preventDefault()},r=t=>{t.preventDefault();const e=a.getPlayers()[0],s=t.target;if(Array.from(s.classList).includes("contains-ship-image"))return;const o=t.dataTransfer.getData("image"),i=JSON.parse(o);if(!((t,e)=>{const s=[Number(t.dataset.row),Number(t.dataset.column)],r=Number(e.shipLength);return e.horizontal?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):e.vertical?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(s,i))return;const d=((t,e)=>{const a=e.shipLength,s=Number(t.dataset.row),r=Number(t.dataset.column),o=[[s,r]];t.classList.add("contains-ship-image"),t.classList.add("ship-image"),t.classList.add(`ship-image-${a}`),t.classList.add(`ship-image-${a}-1`),e.horizontal?t.classList.add("horizontal"):e.vertical&&t.classList.add("vertical");for(let t=1;t<a;t++){let i;e.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+t}']`),i.classList.add("horizontal"),o.push([s,r+t])):e.vertical&&(i=document.querySelector(`.player-board [data-row='${s+t}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+t,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${t+1}`)}return o})(s,i);e.addShipToGameboard(Number(i.shipLength),d),(t=>{const e=t.elementID,a=document.querySelector(`#${e}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(i),s.removeEventListener("drop",r)};return{initializeBoardDOM:()=>{const e=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");t(e),t(a)},insertDraggedImage:r,rotateShipImage:t=>{const e=Array.from(t.classList);e.includes("horizontal")?(t.classList.remove("horizontal"),t.classList.add("vertical")):e.includes("vertical")&&(t.classList.remove("vertical"),t.classList.add("horizontal"))},rotateDraggedImage:t=>{const e=t.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((t,e)=>{const a=Array.from(e.classList);a.includes("horizontal")?t.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(t.classList.add("temp-rotate-vertical"),"5"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-5"):"4"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-4"):"3"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-3"):"2"===e.dataset.shipLength&&t.classList.add("temp-rotate-vertical-2"))})(a,e),a.appendChild(e),document.body.appendChild(a),t.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:t=>{const e={image:t.target.src,shipLength:t.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:t.target.getAttribute("id")};Array.from(t.target.classList).includes("horizontal")?e.horizontal=!0:Array.from(t.target.classList).includes("vertical")&&(e.vertical=!0),console.log(e);const a=JSON.stringify(e);t.dataTransfer.setData("image",a)},dragOver:s,addAttackResultDOM:(t,e,a)=>{const s=a[0],r=a[1];console.log(t);const o=document.querySelector(`.${t}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`),i=document.createElement("img");i.classList.add("attack-results"),o.appendChild(i),"hit"===e?i.setAttribute("src","../dist/red_X.png"):i.setAttribute("src","../dist/white_O.png"),o.disabled=!0},toggleAbilityToAttack:e}})(),e=e=>{const s="human"!==e&&("computer"===e||void 0),r=(()=>{const t=(()=>{const t=[];for(let e=0;e<10;e++){t.push([]);for(let a=0;a<10;a++)t[e].push(void 0)}return t})(),e=[],a=[],s=[],r=[],o=[];let i=!1;const d=e=>t[e[0]][e[1]];return{getCoordinates:d,getPlacedShips:()=>e,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const e of s)t[e[0]][e[1]]=a;e.push(a)},receiveAttack:t=>{const r=d(t);return void 0!==r?(r.hit(),e.every((t=>t.isSunk()))&&(i=!0),s.push(t),"hit"):(a.push(t),"miss")},addSentMissedShot:t=>{r.push(t)},addSentHitShot:t=>{o.push(t)}}})();let o;const i=()=>s,d=(t,e)=>{const a=(t=>{const e=t;let a=0,s=!1;return{getShipLength:()=>e,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===e&&(s=!0)}}})(t);r.placeShip(a,e)},n=e=>{if(h(e)||!a.isInProgress()||a.isMidAttack())return;const s=o.getGameboard(),d=o.receiveAttack(e);if("hit"===d){if(r.addSentHitShot(e),i()?i()&&t.addAttackResultDOM("player",d,e):t.addAttackResultDOM("opponent",d,e),s.isAllShipsSunk())return void a.endGame(o)}else"miss"===d&&(r.addSentMissedShot(e),i()?i()&&t.addAttackResultDOM("player",d,e):t.addAttackResultDOM("opponent",d,e));o.isComputer()&&(a.toggleMidAttack(!0),setTimeout((()=>{a.toggleMidAttack(!1),o.sendComputerAttack()}),1e3))},l=t=>{let e=[];do{e=[];const a=c(),s=u(a,t);e.push(a),e=e.concat(s)}while(e.length<t);return e},c=()=>{const t=[void 0,void 0];do{t[0]=g(),t[1]=g()}while(void 0!==r.getCoordinates(t));return t},u=(t,e)=>{const a=[];if(p(t,e,"up")){const s=[];for(let a=1;a<e;a++)s.push([t[0]-a,t[1]]);a.push(s)}if(p(t,e,"right")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]+a]);a.push(s)}if(p(t,e,"down")){const s=[];for(let a=1;a<e;a++)s.push([t[0]+a,t[1]]);a.push(s)}if(p(t,e,"left")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},g=()=>Math.floor(10*Math.random()),h=t=>{let e=!1;const a=o.getGameboard().getReceivedMissedShots(),s=o.getGameboard().getReceivedHitShots();return e=a.some((e=>e[0]===t[0]&&e[1]===t[1])),e||(e=s.some((e=>e[0]===t[0]&&e[1]===t[1]))),e},p=(t,e,a)=>{switch(a){case"up":if(t[0]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]-a,t[1]]))return!1;return!0;case"right":if(t[1]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]+a]))return!1;return!0;case"down":if(t[0]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]+a,t[1]]))return!1;return!0;case"left":if(t[1]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>r,getOpposingPlayer:()=>o,setOpposingPlayer:t=>{o=t},addShipToGameboard:d,sendAttack:n,initializeComputerGameboard:()=>{if(!s)return;const t=[5,4,3,3,2];for(const e of t){const t=l(e);d(e,t)}},sendComputerAttack:()=>{if(!s||!a.isInProgress())return;const t=(()=>{const t=[void 0,void 0];do{t[0]=g(),t[1]=g()}while(h(t));return t})();n(t)},receiveAttack:t=>r.receiveAttack(t),checkIfValidEmptyCoordinates:p}},a=(()=>{const a=[];let s,r=!0,o=!1;return{getPlayers:()=>a,isInProgress:()=>r,getWinner:()=>s,isMidAttack:()=>o,toggleMidAttack:t=>{o=!!t},createGame:()=>{const t=e("human");a.push(t);const s=e("computer");a.push(s),t.setOpposingPlayer(s),s.setOpposingPlayer(t),s.initializeComputerGameboard()},endGame:e=>{r=!1,(t=>{const e=t.getOpposingPlayer();s=e})(e),t.toggleAbilityToAttack("disable")},resetGame:()=>{a.length=0,r=!0,s=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((e=>{const a=e.querySelector("img");e.querySelector("button").addEventListener("click",(()=>{t.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((e=>{e.addEventListener("dragstart",(e=>{t.getDraggedImage(e),t.rotateDraggedImage(e)}))}))};a.createGame(),t.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N0UsRUFBTyxTQUMzQnNFLEVBQVEzRyxLQUFLa0gsR0FDYixNQUFNNUUsRUFBaUJELEVBQU8sWUFDOUJzRSxFQUFRM0csS0FBS3NDLEdBQ2I0RSxFQUFZWixrQkFBa0JoRSxHQUM5QkEsRUFBZWdFLGtCQUFrQlksR0FDakM1RSxFQUFla0UsNkJBQTZCLEVBbUI1QzNCLFFBakJlc0MsSUFDZk4sR0FBYSxFQWxCRyxDQUFDTSxJQUNqQixNQUFNQyxFQUFlRCxFQUFZZCxvQkFDakNPLEVBQVNRLENBQVksRUFpQnJCQyxDQUFVRixHQUNWNUwsRUFBY2lDLHNCQUFzQixVQUFVLEVBZTlDOEosVUFiZ0IsS0FDaEJYLEVBQVFwSixPQUFTLEVBQ2pCc0osR0FBYSxFQUNiRCxPQUFTbkUsQ0FBUyxFQVlyQixFQTdDZ0IsR0NIWDhFLEVBQzZCLEtBQ0RyTCxTQUFTdUMsaUJBQWlCLG1CQUNsQ0MsU0FBUzhJLElBQzdCLE1BQU1uSCxFQUFlbUgsRUFBZ0JqSixjQUFjLE9BQzdCaUosRUFBZ0JqSixjQUFjLFVBQ3RDdEIsaUJBQWlCLFNBQVMsS0FDdEMxQixFQUFjc0YsZ0JBQWdCUixFQUFhLEdBQzNDLEdBQ0YsRUFUQWtILEVBV3lCLEtBQ1IzSyxNQUFNQyxLQUFLWCxTQUFTdUMsaUJBQWlCLGdCQUM3Q0MsU0FBUzhFLElBQ2xCQSxFQUFLdkcsaUJBQWlCLGFBQWNDLElBQ2xDM0IsRUFBY29HLGdCQUFnQnpFLEdBQzlCM0IsRUFBYzBGLG1CQUFtQi9ELEVBQU0sR0FDdkMsR0FDRixFQ2hCTnJCLEVBQVNvTCxhQUVUMUwsRUFBY21GLHFCQUVkNkcsSUFFQUEsRyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9ET01fY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvcGxheWVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2dhbWVsb29wLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9ldmVudF9saXN0ZW5lcl9jb250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTaGlwID0gKGdpdmVuTGVuZ3RoKSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IGdpdmVuTGVuZ3RoO1xuICBsZXQgaGl0cyA9IDA7XG4gIGxldCBzdW5rID0gZmFsc2U7XG4gIGNvbnN0IGdldFNoaXBMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG4gIGNvbnN0IGdldFNoaXBIaXRzID0gKCkgPT4gaGl0cztcbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gc3VuaztcbiAgY29uc3QgY2hlY2tJZlN1bmsgPSAoKSA9PiB7XG4gICAgaWYgKGhpdHMgPT09IGxlbmd0aCkge1xuICAgICAgc3VuayA9IHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzdW5rKSB7XG4gICAgICBoaXRzICs9IDE7XG4gICAgICBjaGVja0lmU3VuaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJUaGF0IHNoaXAgaGFzIGFscmVhZHkgYmVlbiBzdW5rIVwiO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRTaGlwTGVuZ3RoLFxuICAgIGdldFNoaXBIaXRzLFxuICAgIGlzU3VuayxcbiAgICBoaXQsXG4gIH07XG59O1xuXG5leHBvcnQgeyBTaGlwIH07XG4iLCJpbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVsb29wXCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjcmVhdGVCb2FyZENlbGxzID0gKGdhbWVib2FyZERPTSkgPT4ge1xuICAgIGNvbnN0IEJPQVJEQVhFU0xFTkdUSCA9IDEwO1xuICAgIGNvbnN0IGNvbHVtbkxhYmVscyA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIl07XG4gICAgY29uc3Qgcm93TGFiZWxzID0gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiMTBcIl07XG4gICAgY29uc3QgaHVtYW5QbGF5ZXJPYmplY3QgPSBHYW1lTG9vcC5nZXRQbGF5ZXJzKClbMF07XG4gICAgZm9yIChsZXQgaSA9IC0xOyBpIDwgQk9BUkRBWEVTTEVOR1RIOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8IEJPQVJEQVhFU0xFTkdUSDsgaisrKSB7XG4gICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZ2FtZWJvYXJkLWxhYmVsXCIpO1xuICAgICAgICAgICAgaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbkxhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBjb2x1bW5MYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbHVtbi1sYWJlbFwiKTtcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbHVtbkxhYmVsc1tqXTtcbiAgICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChjb2x1bW5MYWJlbEVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHJvd0xhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgcm93TGFiZWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJyb3ctbGFiZWxcIik7XG4gICAgICAgICAgcm93TGFiZWxFbGVtZW50LnRleHRDb250ZW50ID0gcm93TGFiZWxzW2ldO1xuICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChyb3dMYWJlbEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIEFycmF5LmZyb20oZ2FtZWJvYXJkRE9NLmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJwbGF5ZXItYm9hcmRcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgcGxheWVyQ2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIHBsYXllckNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtcm93XCIsIGkpO1xuICAgICAgICAgIHBsYXllckNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY29sdW1uXCIsIGopO1xuICAgICAgICAgIHBsYXllckNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lYm9hcmQtY2VsbFwiKTtcbiAgICAgICAgICBwbGF5ZXJDZWxsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBkcmFnT3ZlcihldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGxheWVyQ2VsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpbnNlcnREcmFnZ2VkSW1hZ2UoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBodW1hblBsYXllck9iamVjdC5nZXRHYW1lYm9hcmQoKS5nZXRQbGFjZWRTaGlwcygpLmxlbmd0aCA9PT0gNVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZUFiaWxpdHlUb0F0dGFjayhcImVuYWJsZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnYW1lYm9hcmRET00uYXBwZW5kQ2hpbGQocGxheWVyQ2VsbEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIEFycmF5LmZyb20oZ2FtZWJvYXJkRE9NLmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJvcHBvbmVudC1ib2FyZFwiKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjb21wdXRlckNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICBjb21wdXRlckNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtcm93XCIsIGkpO1xuICAgICAgICAgIGNvbXB1dGVyQ2VsbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jb2x1bW5cIiwgaik7XG4gICAgICAgICAgY29tcHV0ZXJDZWxsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZ2FtZWJvYXJkLWNlbGxcIik7XG4gICAgICAgICAgY29tcHV0ZXJDZWxsRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgY29tcHV0ZXJDZWxsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFHYW1lTG9vcC5pc01pZEF0dGFjaygpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvbXB1dGVyQ2VsbEVsZW1lbnQpO1xuICAgICAgICAgICAgICBjb25zdCBjZWxsUm93ID0gTnVtYmVyKGNvbXB1dGVyQ2VsbEVsZW1lbnQuZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICBjb25zdCBjZWxsQ29sdW1uID0gTnVtYmVyKGNvbXB1dGVyQ2VsbEVsZW1lbnQuZGF0YXNldC5jb2x1bW4pO1xuICAgICAgICAgICAgICBodW1hblBsYXllck9iamVjdC5zZW5kQXR0YWNrKFtjZWxsUm93LCBjZWxsQ29sdW1uXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGNvbXB1dGVyQ2VsbEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCB0b2dnbGVBYmlsaXR5VG9BdHRhY2sgPSAoYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZXJHYW1lYm9hcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vcHBvbmVudC1ib2FyZFwiKTtcbiAgICBjb25zdCBjZWxsRWxlbWVudHMgPSBBcnJheS5mcm9tKFxuICAgICAgY29tcHV0ZXJHYW1lYm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2FtZWJvYXJkLWNlbGxcIilcbiAgICApO1xuICAgIGlmIChhY3Rpb24gPT09IFwiZW5hYmxlXCIpIHtcbiAgICAgIGNlbGxFbGVtZW50cy5mb3JFYWNoKChjZWxsRWxlbWVudCkgPT4ge1xuICAgICAgICBjZWxsRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwiZGlzYWJsZVwiKSB7XG4gICAgICBjZWxsRWxlbWVudHMuZm9yRWFjaCgoY2VsbEVsZW1lbnQpID0+IHtcbiAgICAgICAgY2VsbEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXREcmFnZ2VkSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBkYXRhT2JqZWN0ID0ge1xuICAgICAgaW1hZ2U6IGV2ZW50LnRhcmdldC5zcmMsXG4gICAgICBzaGlwTGVuZ3RoOiBldmVudC50YXJnZXQuZGF0YXNldC5zaGlwTGVuZ3RoLFxuICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICBlbGVtZW50SUQ6IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSxcbiAgICB9O1xuICAgIGlmIChBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QpLmluY2x1ZGVzKFwiaG9yaXpvbnRhbFwiKSkge1xuICAgICAgZGF0YU9iamVjdC5ob3Jpem9udGFsID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJ2ZXJ0aWNhbFwiKSkge1xuICAgICAgZGF0YU9iamVjdC52ZXJ0aWNhbCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGRhdGFPYmplY3QpO1xuICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkYXRhT2JqZWN0KTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcImltYWdlXCIsIGRhdGFTdHJpbmcpO1xuICB9O1xuICBjb25zdCBkcmFnT3ZlciA9IChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG4gIGNvbnN0IGluaXRpYWxpemVCb2FyZERPTSA9ICgpID0+IHtcbiAgICBjb25zdCBodW1hblBsYXllckdhbWVib2FyZERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxheWVyLWJvYXJkXCIpO1xuICAgIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkRE9NID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vcHBvbmVudC1ib2FyZFwiKTtcbiAgICBjcmVhdGVCb2FyZENlbGxzKGh1bWFuUGxheWVyR2FtZWJvYXJkRE9NKTtcbiAgICBjcmVhdGVCb2FyZENlbGxzKGNvbXB1dGVyR2FtZWJvYXJkRE9NKTtcbiAgfTtcbiAgY29uc3QgaXNWYWxpZEdhbWVib2FyZENlbGwgPSAodGFyZ2V0Q2VsbCwgZGF0YU9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGNlbGxDb29yZGluYXRlcyA9IFtcbiAgICAgIE51bWJlcih0YXJnZXRDZWxsLmRhdGFzZXQucm93KSxcbiAgICAgIE51bWJlcih0YXJnZXRDZWxsLmRhdGFzZXQuY29sdW1uKSxcbiAgICBdO1xuICAgIGNvbnN0IGxlbmd0aCA9IE51bWJlcihkYXRhT2JqZWN0LnNoaXBMZW5ndGgpO1xuICAgIGlmIChkYXRhT2JqZWN0Lmhvcml6b250YWwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdLmNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoXG4gICAgICAgICAgY2VsbENvb3JkaW5hdGVzLFxuICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICBcInJpZ2h0XCJcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZml0c1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIm5vcGVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkYXRhT2JqZWN0LnZlcnRpY2FsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIEdhbWVMb29wLmdldFBsYXllcnMoKVswXS5jaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKFxuICAgICAgICAgIGNlbGxDb29yZGluYXRlcyxcbiAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgXCJkb3duXCJcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZml0c1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIm5vcGVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjb25zdCBhZGRTaGlwVG9ET00gPSAodGFyZ2V0Q2VsbCwgZGF0YU9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFPYmplY3Quc2hpcExlbmd0aDtcbiAgICBjb25zdCB0YXJnZXRDZWxsUm93ID0gTnVtYmVyKHRhcmdldENlbGwuZGF0YXNldC5yb3cpO1xuICAgIGNvbnN0IHRhcmdldENlbGxDb2x1bW4gPSBOdW1iZXIodGFyZ2V0Q2VsbC5kYXRhc2V0LmNvbHVtbik7XG4gICAgY29uc3QgY29vcmRpbmF0ZXNBcnJheSA9IFtbdGFyZ2V0Q2VsbFJvdywgdGFyZ2V0Q2VsbENvbHVtbl1dO1xuICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcImNvbnRhaW5zLXNoaXAtaW1hZ2VcIik7XG4gICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcC1pbWFnZVwiKTtcbiAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoYHNoaXAtaW1hZ2UtJHtsZW5ndGh9YCk7XG4gICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKGBzaGlwLWltYWdlLSR7bGVuZ3RofS0xYCk7XG4gICAgaWYgKGRhdGFPYmplY3QuaG9yaXpvbnRhbCkge1xuICAgICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFPYmplY3QudmVydGljYWwpIHtcbiAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcInZlcnRpY2FsXCIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcmVtYWluaW5nQ2VsbDtcbiAgICAgIGlmIChkYXRhT2JqZWN0Lmhvcml6b250YWwpIHtcbiAgICAgICAgcmVtYWluaW5nQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgYC5wbGF5ZXItYm9hcmQgW2RhdGEtcm93PScke3RhcmdldENlbGxSb3d9J11bZGF0YS1jb2x1bW49JyR7XG4gICAgICAgICAgICB0YXJnZXRDZWxsQ29sdW1uICsgaVxuICAgICAgICAgIH0nXWBcbiAgICAgICAgKTtcbiAgICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICAgICAgY29vcmRpbmF0ZXNBcnJheS5wdXNoKFt0YXJnZXRDZWxsUm93LCB0YXJnZXRDZWxsQ29sdW1uICsgaV0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhT2JqZWN0LnZlcnRpY2FsKSB7XG4gICAgICAgIHJlbWFpbmluZ0NlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGAucGxheWVyLWJvYXJkIFtkYXRhLXJvdz0nJHtcbiAgICAgICAgICAgIHRhcmdldENlbGxSb3cgKyBpXG4gICAgICAgICAgfSddW2RhdGEtY29sdW1uPScke3RhcmdldENlbGxDb2x1bW59J11gXG4gICAgICAgICk7XG4gICAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChcInZlcnRpY2FsXCIpO1xuICAgICAgICBjb29yZGluYXRlc0FycmF5LnB1c2goW3RhcmdldENlbGxSb3cgKyBpLCB0YXJnZXRDZWxsQ29sdW1uXSk7XG4gICAgICB9XG4gICAgICByZW1haW5pbmdDZWxsLmNsYXNzTGlzdC5hZGQoXCJjb250YWlucy1zaGlwLWltYWdlXCIpO1xuICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcC1pbWFnZVwiKTtcbiAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChgc2hpcC1pbWFnZS0ke2xlbmd0aH1gKTtcbiAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChgc2hpcC1pbWFnZS0ke2xlbmd0aH0tJHtpICsgMX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzQXJyYXk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGVJbWFnZUJ1dHRvbkludGVyYWN0aW9ucyA9IChkYXRhT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgSUQgPSBkYXRhT2JqZWN0LmVsZW1lbnRJRDtcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtJRH1gKTtcbiAgICBjb25zdCBidXR0b25FbGVtZW50ID0gaW1hZ2VFbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcbiAgICBpbWFnZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIsIGZhbHNlKTtcbiAgICBpbWFnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkLWltYWdlXCIpO1xuICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICB9O1xuICBjb25zdCBpbnNlcnREcmFnZ2VkSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGh1bWFuUGxheWVyT2JqZWN0ID0gR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdO1xuICAgIGNvbnN0IHRhcmdldENlbGwgPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKEFycmF5LmZyb20odGFyZ2V0Q2VsbC5jbGFzc0xpc3QpLmluY2x1ZGVzKFwiY29udGFpbnMtc2hpcC1pbWFnZVwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJpbWFnZVwiKTtcbiAgICBjb25zdCBkYXRhT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKTtcbiAgICBpZiAoIWlzVmFsaWRHYW1lYm9hcmRDZWxsKHRhcmdldENlbGwsIGRhdGFPYmplY3QpKSB7XG4gICAgICAvLyBwcm9iYWJseSBtYWtlIHNvbWUgRE9NIGVycm9yIG1lc3NhZ2UgYXBwZWFyXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNoaXBDb29yZGluYXRlcyA9IGFkZFNoaXBUb0RPTSh0YXJnZXRDZWxsLCBkYXRhT2JqZWN0KTtcbiAgICBodW1hblBsYXllck9iamVjdC5hZGRTaGlwVG9HYW1lYm9hcmQoXG4gICAgICBOdW1iZXIoZGF0YU9iamVjdC5zaGlwTGVuZ3RoKSxcbiAgICAgIHNoaXBDb29yZGluYXRlc1xuICAgICk7XG4gICAgZGlzYWJsZUltYWdlQnV0dG9uSW50ZXJhY3Rpb25zKGRhdGFPYmplY3QpO1xuICAgIHRhcmdldENlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgaW5zZXJ0RHJhZ2dlZEltYWdlKTtcbiAgfTtcbiAgY29uc3Qgcm90YXRlU2hpcEltYWdlID0gKGltYWdlKSA9PiB7XG4gICAgY29uc3QgaW1hZ2VDbGFzc2VzID0gQXJyYXkuZnJvbShpbWFnZS5jbGFzc0xpc3QpO1xuICAgIGlmIChpbWFnZUNsYXNzZXMuaW5jbHVkZXMoXCJob3Jpem9udGFsXCIpKSB7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaG9yaXpvbnRhbFwiKTtcbiAgICAgIGltYWdlLmNsYXNzTGlzdC5hZGQoXCJ2ZXJ0aWNhbFwiKTtcbiAgICB9IGVsc2UgaWYgKGltYWdlQ2xhc3Nlcy5pbmNsdWRlcyhcInZlcnRpY2FsXCIpKSB7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwidmVydGljYWxcIik7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJvdGF0ZVBlckxlbmd0aCA9ICh0ZW1wRGl2LCBjbG9uZWRJbWFnZUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBjbG9uZWRJbWFnZUVsZW1lbnRDbGFzc2VzID0gQXJyYXkuZnJvbShjbG9uZWRJbWFnZUVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICBpZiAoY2xvbmVkSW1hZ2VFbGVtZW50Q2xhc3Nlcy5pbmNsdWRlcyhcImhvcml6b250YWxcIikpIHtcbiAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLWhvcml6b250YWxcIik7XG4gICAgfSBlbHNlIGlmIChjbG9uZWRJbWFnZUVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidmVydGljYWxcIikpIHtcbiAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsXCIpO1xuICAgICAgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiNVwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTVcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiNFwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTRcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiM1wiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTNcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiMlwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTJcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCByb3RhdGVEcmFnZ2VkSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY2xvbmVkSW1hZ2VFbGVtZW50ID0gaW1hZ2VFbGVtZW50LmNsb25lTm9kZSgpO1xuICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlXCIpO1xuICAgIHJvdGF0ZVBlckxlbmd0aCh0ZW1wRGl2LCBjbG9uZWRJbWFnZUVsZW1lbnQpO1xuICAgIHRlbXBEaXYuYXBwZW5kQ2hpbGQoY2xvbmVkSW1hZ2VFbGVtZW50KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXBEaXYpO1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UodGVtcERpdiwgMCwgMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRlbXBEaXYpO1xuICAgIH0sIDApO1xuICB9O1xuICBjb25zdCBhZGRBdHRhY2tSZXN1bHRET00gPSAocGxheWVyVHlwZSwgYXR0YWNrUmVzdWx0cywgY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBjZWxsUm93ID0gY29vcmRpbmF0ZXNbMF07XG4gICAgY29uc3QgY2VsbENvbHVtbiA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIGNvbnNvbGUubG9nKHBsYXllclR5cGUpO1xuICAgIGNvbnN0IGdhbWVib2FyZERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke3BsYXllclR5cGV9LWJvYXJkYCk7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IGdhbWVib2FyZERPTS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFtkYXRhLXJvdz0nJHtjZWxsUm93fSddW2RhdGEtY29sdW1uPScke2NlbGxDb2x1bW59J11gXG4gICAgKTtcbiAgICBjb25zdCBhdHRhY2tSZXN1bHRzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgYXR0YWNrUmVzdWx0c0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImF0dGFjay1yZXN1bHRzXCIpO1xuICAgIHRhcmdldENlbGwuYXBwZW5kQ2hpbGQoYXR0YWNrUmVzdWx0c0VsZW1lbnQpO1xuICAgIGlmIChhdHRhY2tSZXN1bHRzID09PSBcImhpdFwiKSB7XG4gICAgICBhdHRhY2tSZXN1bHRzRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuLi9kaXN0L3JlZF9YLnBuZ1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0YWNrUmVzdWx0c0VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vZGlzdC93aGl0ZV9PLnBuZ1wiKTtcbiAgICB9XG4gICAgdGFyZ2V0Q2VsbC5kaXNhYmxlZCA9IHRydWU7XG4gIH07XG4gIHJldHVybiB7XG4gICAgaW5pdGlhbGl6ZUJvYXJkRE9NLFxuICAgIGluc2VydERyYWdnZWRJbWFnZSxcbiAgICByb3RhdGVTaGlwSW1hZ2UsXG4gICAgcm90YXRlRHJhZ2dlZEltYWdlLFxuICAgIGdldERyYWdnZWRJbWFnZSxcbiAgICBkcmFnT3ZlcixcbiAgICBhZGRBdHRhY2tSZXN1bHRET00sXG4gICAgdG9nZ2xlQWJpbGl0eVRvQXR0YWNrLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlciB9O1xuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL3NoaXBcIjtcbmltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xuaW1wb3J0IHsgR2FtZUxvb3AgfSBmcm9tIFwiLi9nYW1lbG9vcFwiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlciB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyXCI7XG5cbmNvbnN0IFBsYXllciA9IChwbGF5ZXJUeXBlKSA9PiB7XG4gIGNvbnN0IGRldGVybWluZVBsYXllclR5cGUgPSAoKSA9PiB7XG4gICAgaWYgKHBsYXllclR5cGUgPT09IFwiaHVtYW5cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxheWVyVHlwZSA9PT0gXCJjb21wdXRlclwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbXB1dGVyUGxheWVyID0gZGV0ZXJtaW5lUGxheWVyVHlwZSgpO1xuICBjb25zdCBwbGF5ZXJHYW1lYm9hcmQgPSBHYW1lYm9hcmQoKTtcbiAgbGV0IG9wcG9zaW5nUGxheWVyO1xuICBjb25zdCBpc0NvbXB1dGVyID0gKCkgPT4gY29tcHV0ZXJQbGF5ZXI7XG4gIGNvbnN0IGdldEdhbWVib2FyZCA9ICgpID0+IHBsYXllckdhbWVib2FyZDtcbiAgY29uc3QgZ2V0T3Bwb3NpbmdQbGF5ZXIgPSAoKSA9PiBvcHBvc2luZ1BsYXllcjtcbiAgY29uc3Qgc2V0T3Bwb3NpbmdQbGF5ZXIgPSAocGxheWVyKSA9PiB7XG4gICAgb3Bwb3NpbmdQbGF5ZXIgPSBwbGF5ZXI7XG4gIH07XG4gIGNvbnN0IGFkZFNoaXBUb0dhbWVib2FyZCA9IChzaGlwTGVuZ3RoLCBjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IHNoaXAgPSBTaGlwKHNoaXBMZW5ndGgpO1xuICAgIHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcCwgY29vcmRpbmF0ZXMpO1xuICB9O1xuICBjb25zdCBzZW5kQXR0YWNrID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgaWYgKFxuICAgICAgY2hlY2tJZlByZXZpb3VzbHlBdHRhY2tlZChjb29yZGluYXRlcykgfHxcbiAgICAgICFHYW1lTG9vcC5pc0luUHJvZ3Jlc3MoKSB8fFxuICAgICAgR2FtZUxvb3AuaXNNaWRBdHRhY2soKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvcHBvc2luZ1BsYXllckdhbWVib2FyZCA9IG9wcG9zaW5nUGxheWVyLmdldEdhbWVib2FyZCgpO1xuICAgIGNvbnN0IGF0dGFja1Jlc3VsdHMgPSBvcHBvc2luZ1BsYXllci5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKTtcbiAgICBpZiAoYXR0YWNrUmVzdWx0cyA9PT0gXCJoaXRcIikge1xuICAgICAgcGxheWVyR2FtZWJvYXJkLmFkZFNlbnRIaXRTaG90KGNvb3JkaW5hdGVzKTtcbiAgICAgIGlmICghaXNDb21wdXRlcigpKSB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuYWRkQXR0YWNrUmVzdWx0RE9NKFxuICAgICAgICAgIFwib3Bwb25lbnRcIixcbiAgICAgICAgICBhdHRhY2tSZXN1bHRzLFxuICAgICAgICAgIGNvb3JkaW5hdGVzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzQ29tcHV0ZXIoKSkge1xuICAgICAgICBET01Db250cm9sbGVyLmFkZEF0dGFja1Jlc3VsdERPTShcInBsYXllclwiLCBhdHRhY2tSZXN1bHRzLCBjb29yZGluYXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAob3Bwb3NpbmdQbGF5ZXJHYW1lYm9hcmQuaXNBbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICBHYW1lTG9vcC5lbmRHYW1lKG9wcG9zaW5nUGxheWVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXR0YWNrUmVzdWx0cyA9PT0gXCJtaXNzXCIpIHtcbiAgICAgIHBsYXllckdhbWVib2FyZC5hZGRTZW50TWlzc2VkU2hvdChjb29yZGluYXRlcyk7XG4gICAgICBpZiAoIWlzQ29tcHV0ZXIoKSkge1xuICAgICAgICBET01Db250cm9sbGVyLmFkZEF0dGFja1Jlc3VsdERPTShcbiAgICAgICAgICBcIm9wcG9uZW50XCIsXG4gICAgICAgICAgYXR0YWNrUmVzdWx0cyxcbiAgICAgICAgICBjb29yZGluYXRlc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpc0NvbXB1dGVyKCkpIHtcbiAgICAgICAgRE9NQ29udHJvbGxlci5hZGRBdHRhY2tSZXN1bHRET00oXCJwbGF5ZXJcIiwgYXR0YWNrUmVzdWx0cywgY29vcmRpbmF0ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3Bwb3NpbmdQbGF5ZXIuaXNDb21wdXRlcigpKSB7XG4gICAgICBHYW1lTG9vcC50b2dnbGVNaWRBdHRhY2sodHJ1ZSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgR2FtZUxvb3AudG9nZ2xlTWlkQXR0YWNrKGZhbHNlKTtcbiAgICAgICAgb3Bwb3NpbmdQbGF5ZXIuc2VuZENvbXB1dGVyQXR0YWNrKCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCA9ICgpID0+IHtcbiAgICBpZiAoIWNvbXB1dGVyUGxheWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aHNPZlNoaXBzID0gWzUsIDQsIDMsIDMsIDJdO1xuICAgIGZvciAoY29uc3Qgc2hpcExlbmd0aCBvZiBsZW5ndGhzT2ZTaGlwcykge1xuICAgICAgY29uc3Qgc2hpcENvb3JkaW5hdGVzID0gZ2VuZXJhdGVDb21wdXRlclNoaXBDb29yZGluYXRlcyhzaGlwTGVuZ3RoKTtcbiAgICAgIGFkZFNoaXBUb0dhbWVib2FyZChzaGlwTGVuZ3RoLCBzaGlwQ29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2VuZENvbXB1dGVyQXR0YWNrID0gKCkgPT4ge1xuICAgIGlmICghY29tcHV0ZXJQbGF5ZXIgfHwgIUdhbWVMb29wLmlzSW5Qcm9ncmVzcygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGF0dGFja0Nvb3JkaW5hdGVzID0gZ2VuZXJhdGVBdHRhY2tDb29yZGluYXRlcygpO1xuICAgIHNlbmRBdHRhY2soYXR0YWNrQ29vcmRpbmF0ZXMpO1xuICB9O1xuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgY29uc3QgYXR0YWNrUmVzdWx0cyA9IHBsYXllckdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKTtcbiAgICByZXR1cm4gYXR0YWNrUmVzdWx0cztcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVDb21wdXRlclNoaXBDb29yZGluYXRlcyA9IChzaGlwTGVuZ3RoKSA9PiB7XG4gICAgbGV0IGxpc3RPZkNvb3JkaW5hdGVzID0gW107XG4gICAgZG8ge1xuICAgICAgbGlzdE9mQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgIGNvbnN0IHN0YXJ0aW5nQ29vcmRpbmF0ZXMgPSBnZW5lcmF0ZVN0YXJ0aW5nQ29vcmRpbmF0ZXMoKTtcbiAgICAgIGNvbnN0IG5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMgPSBnZW5lcmF0ZU5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMoXG4gICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXMsXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICAgICk7XG4gICAgICBsaXN0T2ZDb29yZGluYXRlcy5wdXNoKHN0YXJ0aW5nQ29vcmRpbmF0ZXMpO1xuICAgICAgbGlzdE9mQ29vcmRpbmF0ZXMgPSBsaXN0T2ZDb29yZGluYXRlcy5jb25jYXQobm9uU3RhcnRpbmdDb29yZGluYXRlcyk7XG4gICAgfSB3aGlsZSAobGlzdE9mQ29vcmRpbmF0ZXMubGVuZ3RoIDwgc2hpcExlbmd0aCk7XG4gICAgcmV0dXJuIGxpc3RPZkNvb3JkaW5hdGVzO1xuICB9O1xuICBjb25zdCBnZW5lcmF0ZVN0YXJ0aW5nQ29vcmRpbmF0ZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRpbmdDb29yZGluYXRlcyA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZF07XG4gICAgZG8ge1xuICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSA9IGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSgpO1xuICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSA9IGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSgpO1xuICAgIH0gd2hpbGUgKHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhzdGFydGluZ0Nvb3JkaW5hdGVzKSAhPT0gdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gc3RhcnRpbmdDb29yZGluYXRlcztcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVOb25TdGFydGluZ0Nvb3JkaW5hdGVzID0gKHN0YXJ0aW5nQ29vcmRpbmF0ZXMsIHNoaXBMZW5ndGgpID0+IHtcbiAgICBjb25zdCBwb3NzaWJsZUNvb3JkaW5hdGVzID0gW107XG4gICAgaWYgKGNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoc3RhcnRpbmdDb29yZGluYXRlcywgc2hpcExlbmd0aCwgXCJ1cFwiKSkge1xuICAgICAgY29uc3QgdXBDb29yZGluYXRlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXBDb29yZGluYXRlcy5wdXNoKFtcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdIC0gaSxcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdLFxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIHBvc3NpYmxlQ29vcmRpbmF0ZXMucHVzaCh1cENvb3JkaW5hdGVzKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyhzdGFydGluZ0Nvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoLCBcInJpZ2h0XCIpXG4gICAgKSB7XG4gICAgICBjb25zdCByaWdodENvb3JkaW5hdGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICByaWdodENvb3JkaW5hdGVzLnB1c2goW1xuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSArIGksXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcG9zc2libGVDb29yZGluYXRlcy5wdXNoKHJpZ2h0Q29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgICBpZiAoY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyhzdGFydGluZ0Nvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoLCBcImRvd25cIikpIHtcbiAgICAgIGNvbnN0IGRvd25Db29yZGluYXRlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZG93bkNvb3JkaW5hdGVzLnB1c2goW1xuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gKyBpLFxuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0sXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcG9zc2libGVDb29yZGluYXRlcy5wdXNoKGRvd25Db29yZGluYXRlcyk7XG4gICAgfVxuICAgIGlmIChjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKHN0YXJ0aW5nQ29vcmRpbmF0ZXMsIHNoaXBMZW5ndGgsIFwibGVmdFwiKSkge1xuICAgICAgY29uc3QgbGVmdENvb3JkaW5hdGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICBsZWZ0Q29vcmRpbmF0ZXMucHVzaChbXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSxcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdIC0gaSxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICBwb3NzaWJsZUNvb3JkaW5hdGVzLnB1c2gobGVmdENvb3JkaW5hdGVzKTtcbiAgICB9XG4gICAgaWYgKHBvc3NpYmxlQ29vcmRpbmF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gcG9zc2libGVDb29yZGluYXRlcztcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZUNvb3JkaW5hdGVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29vcmRpbmF0ZXNbcmFuZG9tSW5kZXhdO1xuICB9O1xuICBjb25zdCBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgQk9BUkRBWEVTTEVOR1RIID0gMTA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIEJPQVJEQVhFU0xFTkdUSCk7XG4gIH07XG4gIGNvbnN0IGNoZWNrSWZQcmV2aW91c2x5QXR0YWNrZWQgPSAoYXR0YWNrQ29vcmRpbmF0ZXMpID0+IHtcbiAgICBsZXQgcHJldmlvdXNseUF0dGFja2VkID0gZmFsc2U7XG4gICAgY29uc3QgcmVjZWl2ZWRNaXNzZWRTaG90cyA9IG9wcG9zaW5nUGxheWVyXG4gICAgICAuZ2V0R2FtZWJvYXJkKClcbiAgICAgIC5nZXRSZWNlaXZlZE1pc3NlZFNob3RzKCk7XG4gICAgY29uc3QgcmVjZWl2ZWRIaXRTaG90cyA9IG9wcG9zaW5nUGxheWVyXG4gICAgICAuZ2V0R2FtZWJvYXJkKClcbiAgICAgIC5nZXRSZWNlaXZlZEhpdFNob3RzKCk7XG4gICAgcHJldmlvdXNseUF0dGFja2VkID0gcmVjZWl2ZWRNaXNzZWRTaG90cy5zb21lKFxuICAgICAgKHNob3QpID0+XG4gICAgICAgIHNob3RbMF0gPT09IGF0dGFja0Nvb3JkaW5hdGVzWzBdICYmIHNob3RbMV0gPT09IGF0dGFja0Nvb3JkaW5hdGVzWzFdXG4gICAgKTtcbiAgICBpZiAoIXByZXZpb3VzbHlBdHRhY2tlZCkge1xuICAgICAgcHJldmlvdXNseUF0dGFja2VkID0gcmVjZWl2ZWRIaXRTaG90cy5zb21lKFxuICAgICAgICAoc2hvdCkgPT5cbiAgICAgICAgICBzaG90WzBdID09PSBhdHRhY2tDb29yZGluYXRlc1swXSAmJiBzaG90WzFdID09PSBhdHRhY2tDb29yZGluYXRlc1sxXVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXZpb3VzbHlBdHRhY2tlZDtcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVBdHRhY2tDb29yZGluYXRlcyA9ICgpID0+IHtcbiAgICBjb25zdCBhdHRhY2tDb29yZGluYXRlcyA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZF07XG4gICAgZG8ge1xuICAgICAgYXR0YWNrQ29vcmRpbmF0ZXNbMF0gPSBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUoKTtcbiAgICAgIGF0dGFja0Nvb3JkaW5hdGVzWzFdID0gZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlKCk7XG4gICAgfSB3aGlsZSAoY2hlY2tJZlByZXZpb3VzbHlBdHRhY2tlZChhdHRhY2tDb29yZGluYXRlcykpO1xuICAgIHJldHVybiBhdHRhY2tDb29yZGluYXRlcztcbiAgfTtcbiAgY29uc3QgY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyA9IChcbiAgICBzdGFydGluZ0Nvb3JkaW5hdGVzLFxuICAgIHNoaXBMZW5ndGgsXG4gICAgZGlyZWN0aW9uXG4gICkgPT4ge1xuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gLSAoc2hpcExlbmd0aCAtIDEpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gLSBpLFxuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgIGlmIChzdGFydGluZ0Nvb3JkaW5hdGVzWzFdICsgKHNoaXBMZW5ndGggLSAxKSA+IDkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwbGF5ZXJHYW1lYm9hcmQuZ2V0Q29vcmRpbmF0ZXMoW1xuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdICsgaSxcbiAgICAgICAgICAgIF0pICE9PSB1bmRlZmluZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgIGlmIChzdGFydGluZ0Nvb3JkaW5hdGVzWzBdICsgKHNoaXBMZW5ndGggLSAxKSA+IDkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwbGF5ZXJHYW1lYm9hcmQuZ2V0Q29vcmRpbmF0ZXMoW1xuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdICsgaSxcbiAgICAgICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSxcbiAgICAgICAgICAgIF0pICE9PSB1bmRlZmluZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgIGlmIChzdGFydGluZ0Nvb3JkaW5hdGVzWzFdIC0gKHNoaXBMZW5ndGggLSAxKSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwbGF5ZXJHYW1lYm9hcmQuZ2V0Q29vcmRpbmF0ZXMoW1xuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdIC0gaSxcbiAgICAgICAgICAgIF0pICE9PSB1bmRlZmluZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpc0NvbXB1dGVyLFxuICAgIGdldEdhbWVib2FyZCxcbiAgICBnZXRPcHBvc2luZ1BsYXllcixcbiAgICBzZXRPcHBvc2luZ1BsYXllcixcbiAgICBhZGRTaGlwVG9HYW1lYm9hcmQsXG4gICAgc2VuZEF0dGFjayxcbiAgICBpbml0aWFsaXplQ29tcHV0ZXJHYW1lYm9hcmQsXG4gICAgc2VuZENvbXB1dGVyQXR0YWNrLFxuICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IFBsYXllciB9O1xuIiwiY29uc3QgR2FtZWJvYXJkID0gKCkgPT4ge1xuICBjb25zdCBjcmVhdGVCb2FyZCA9ICgpID0+IHtcbiAgICBjb25zdCBib2FyZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgYm9hcmQucHVzaChbXSk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgYm9hcmRbaV0ucHVzaCh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYm9hcmQ7XG4gIH07XG4gIGNvbnN0IGJvYXJkID0gY3JlYXRlQm9hcmQoKTtcbiAgY29uc3QgcGxhY2VkU2hpcHMgPSBbXTtcbiAgY29uc3QgcmVjZWl2ZWRNaXNzZWRTaG90cyA9IFtdO1xuICBjb25zdCByZWNlaXZlZEhpdFNob3RzID0gW107XG4gIGNvbnN0IHNlbnRNaXNzZWRTaG90cyA9IFtdO1xuICBjb25zdCBzZW50SGl0U2hvdHMgPSBbXTtcbiAgbGV0IGFsbFNoaXBzU3VuayA9IGZhbHNlO1xuICBjb25zdCBnZXRDb29yZGluYXRlcyA9IChjb29yZGluYXRlcykgPT4gYm9hcmRbY29vcmRpbmF0ZXNbMF1dW2Nvb3JkaW5hdGVzWzFdXTtcbiAgY29uc3QgZ2V0UGxhY2VkU2hpcHMgPSAoKSA9PiBwbGFjZWRTaGlwcztcbiAgY29uc3QgZ2V0UmVjZWl2ZWRNaXNzZWRTaG90cyA9ICgpID0+IHJlY2VpdmVkTWlzc2VkU2hvdHM7XG4gIGNvbnN0IGdldFJlY2VpdmVkSGl0U2hvdHMgPSAoKSA9PiByZWNlaXZlZEhpdFNob3RzO1xuICBjb25zdCBnZXRTZW50TWlzc2VkU2hvdHMgPSAoKSA9PiBzZW50TWlzc2VkU2hvdHM7XG4gIGNvbnN0IGdldFNlbnRIaXRTaG90cyA9ICgpID0+IHNlbnRIaXRTaG90cztcbiAgY29uc3QgaXNBbGxTaGlwc1N1bmsgPSAoKSA9PiBhbGxTaGlwc1N1bms7XG4gIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb29yZGluYXRlc0xpc3QpID0+IHtcbiAgICBmb3IgKGNvbnN0IGNvb3JkaW5hdGVzIG9mIGNvb3JkaW5hdGVzTGlzdCkge1xuICAgICAgYm9hcmRbY29vcmRpbmF0ZXNbMF1dW2Nvb3JkaW5hdGVzWzFdXSA9IHNoaXA7XG4gICAgfVxuICAgIHBsYWNlZFNoaXBzLnB1c2goc2hpcCk7XG4gIH07XG4gIGNvbnN0IGNoZWNrQWxsU2hpcHNTdW5rID0gKCkgPT4ge1xuICAgIGlmIChwbGFjZWRTaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSkpIHtcbiAgICAgIGFsbFNoaXBzU3VuayA9IHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgY29uc3QgZW50aXR5QXRDb29yZGluYXRlcyA9IGdldENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzKTtcbiAgICBpZiAoZW50aXR5QXRDb29yZGluYXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbnRpdHlBdENvb3JkaW5hdGVzLmhpdCgpO1xuICAgICAgY2hlY2tBbGxTaGlwc1N1bmsoKTtcbiAgICAgIHJlY2VpdmVkSGl0U2hvdHMucHVzaChjb29yZGluYXRlcyk7XG4gICAgICByZXR1cm4gXCJoaXRcIjtcbiAgICB9XG4gICAgcmVjZWl2ZWRNaXNzZWRTaG90cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICByZXR1cm4gXCJtaXNzXCI7XG4gIH07XG4gIGNvbnN0IGFkZFNlbnRNaXNzZWRTaG90ID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgc2VudE1pc3NlZFNob3RzLnB1c2goY29vcmRpbmF0ZXMpO1xuICB9O1xuICBjb25zdCBhZGRTZW50SGl0U2hvdCA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIHNlbnRIaXRTaG90cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRDb29yZGluYXRlcyxcbiAgICBnZXRQbGFjZWRTaGlwcyxcbiAgICBnZXRSZWNlaXZlZE1pc3NlZFNob3RzLFxuICAgIGdldFJlY2VpdmVkSGl0U2hvdHMsXG4gICAgZ2V0U2VudE1pc3NlZFNob3RzLFxuICAgIGdldFNlbnRIaXRTaG90cyxcbiAgICBpc0FsbFNoaXBzU3VuayxcbiAgICBwbGFjZVNoaXAsXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBhZGRTZW50TWlzc2VkU2hvdCxcbiAgICBhZGRTZW50SGl0U2hvdCxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IEdhbWVib2FyZCB9O1xuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL3NoaXBcIjtcbmltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyIH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJcIjtcblxuY29uc3QgR2FtZUxvb3AgPSAoKCkgPT4ge1xuICBjb25zdCBwbGF5ZXJzID0gW107XG4gIGxldCBpblByb2dyZXNzID0gdHJ1ZTtcbiAgbGV0IHdpbm5lcjtcbiAgbGV0IG1pZEF0dGFjayA9IGZhbHNlO1xuICBjb25zdCBnZXRQbGF5ZXJzID0gKCkgPT4gcGxheWVycztcbiAgY29uc3QgaXNJblByb2dyZXNzID0gKCkgPT4gaW5Qcm9ncmVzcztcbiAgY29uc3QgZ2V0V2lubmVyID0gKCkgPT4gd2lubmVyO1xuICBjb25zdCBzZXRXaW5uZXIgPSAobG9zZXJQbGF5ZXIpID0+IHtcbiAgICBjb25zdCB3aW5uZXJQbGF5ZXIgPSBsb3NlclBsYXllci5nZXRPcHBvc2luZ1BsYXllcigpO1xuICAgIHdpbm5lciA9IHdpbm5lclBsYXllcjtcbiAgfTtcbiAgY29uc3QgaXNNaWRBdHRhY2sgPSAoKSA9PiBtaWRBdHRhY2s7XG4gIGNvbnN0IHRvZ2dsZU1pZEF0dGFjayA9IChzdGF0ZSkgPT4ge1xuICAgIHN0YXRlID8gKG1pZEF0dGFjayA9IHRydWUpIDogKG1pZEF0dGFjayA9IGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlR2FtZSA9ICgpID0+IHtcbiAgICBjb25zdCBodW1hblBsYXllciA9IFBsYXllcihcImh1bWFuXCIpO1xuICAgIHBsYXllcnMucHVzaChodW1hblBsYXllcik7XG4gICAgY29uc3QgY29tcHV0ZXJQbGF5ZXIgPSBQbGF5ZXIoXCJjb21wdXRlclwiKTtcbiAgICBwbGF5ZXJzLnB1c2goY29tcHV0ZXJQbGF5ZXIpO1xuICAgIGh1bWFuUGxheWVyLnNldE9wcG9zaW5nUGxheWVyKGNvbXB1dGVyUGxheWVyKTtcbiAgICBjb21wdXRlclBsYXllci5zZXRPcHBvc2luZ1BsYXllcihodW1hblBsYXllcik7XG4gICAgY29tcHV0ZXJQbGF5ZXIuaW5pdGlhbGl6ZUNvbXB1dGVyR2FtZWJvYXJkKCk7XG4gIH07XG4gIGNvbnN0IGVuZEdhbWUgPSAobG9zZXJQbGF5ZXIpID0+IHtcbiAgICBpblByb2dyZXNzID0gZmFsc2U7XG4gICAgc2V0V2lubmVyKGxvc2VyUGxheWVyKTtcbiAgICBET01Db250cm9sbGVyLnRvZ2dsZUFiaWxpdHlUb0F0dGFjayhcImRpc2FibGVcIik7XG4gIH07XG4gIGNvbnN0IHJlc2V0R2FtZSA9ICgpID0+IHtcbiAgICBwbGF5ZXJzLmxlbmd0aCA9IDA7XG4gICAgaW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgd2lubmVyID0gdW5kZWZpbmVkO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFBsYXllcnMsXG4gICAgaXNJblByb2dyZXNzLFxuICAgIGdldFdpbm5lcixcbiAgICBpc01pZEF0dGFjayxcbiAgICB0b2dnbGVNaWRBdHRhY2ssXG4gICAgY3JlYXRlR2FtZSxcbiAgICBlbmRHYW1lLFxuICAgIHJlc2V0R2FtZSxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IEdhbWVMb29wIH07XG4iLCJpbXBvcnQgeyBET01Db250cm9sbGVyIH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJcIjtcblxuY29uc3QgRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICBjb25zdCByb3RhdGVTaGlwSW1hZ2VMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hpcFBsYWNlbWVudEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zaGlwLXBsYWNlbWVudFwiKTtcbiAgICBzaGlwUGxhY2VtZW50RWxlbWVudHMuZm9yRWFjaCgoZ3JvdXBPZkVsZW1lbnRzKSA9PiB7XG4gICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBncm91cE9mRWxlbWVudHMucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcbiAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBncm91cE9mRWxlbWVudHMucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgRE9NQ29udHJvbGxlci5yb3RhdGVTaGlwSW1hZ2UoaW1hZ2VFbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBhZGRTaGlwUGxhY2VtZW50RHJhZyA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwSW1hZ2VzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXAtcGllY2VcIikpO1xuICAgIHNoaXBJbWFnZXMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgc2hpcC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIChldmVudCkgPT4ge1xuICAgICAgICBET01Db250cm9sbGVyLmdldERyYWdnZWRJbWFnZShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXIucm90YXRlRHJhZ2dlZEltYWdlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJvdGF0ZVNoaXBJbWFnZUxpc3RlbmVycyxcbiAgICBhZGRTaGlwUGxhY2VtZW50RHJhZyxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IEV2ZW50TGlzdGVuZXJDb250cm9sbGVyIH07XG4iLCJpbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVsb29wXCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyIH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJcIjtcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJDb250cm9sbGVyIH0gZnJvbSBcIi4vZXZlbnRfbGlzdGVuZXJfY29udHJvbGxlclwiO1xuXG5HYW1lTG9vcC5jcmVhdGVHYW1lKCk7XG5cbkRPTUNvbnRyb2xsZXIuaW5pdGlhbGl6ZUJvYXJkRE9NKCk7XG5cbkV2ZW50TGlzdGVuZXJDb250cm9sbGVyLnJvdGF0ZVNoaXBJbWFnZUxpc3RlbmVycygpO1xuXG5FdmVudExpc3RlbmVyQ29udHJvbGxlci5hZGRTaGlwUGxhY2VtZW50RHJhZygpO1xuIl0sIm5hbWVzIjpbIkRPTUNvbnRyb2xsZXIiLCJjcmVhdGVCb2FyZENlbGxzIiwiZ2FtZWJvYXJkRE9NIiwiY29sdW1uTGFiZWxzIiwicm93TGFiZWxzIiwiaHVtYW5QbGF5ZXJPYmplY3QiLCJHYW1lTG9vcCIsImdldFBsYXllcnMiLCJpIiwiaiIsImludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImFwcGVuZENoaWxkIiwiY29sdW1uTGFiZWxFbGVtZW50IiwidGV4dENvbnRlbnQiLCJyb3dMYWJlbEVsZW1lbnQiLCJBcnJheSIsImZyb20iLCJpbmNsdWRlcyIsInBsYXllckNlbGxFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZHJhZ092ZXIiLCJpbnNlcnREcmFnZ2VkSW1hZ2UiLCJnZXRHYW1lYm9hcmQiLCJnZXRQbGFjZWRTaGlwcyIsImxlbmd0aCIsInRvZ2dsZUFiaWxpdHlUb0F0dGFjayIsImNvbXB1dGVyQ2VsbEVsZW1lbnQiLCJkaXNhYmxlZCIsImlzTWlkQXR0YWNrIiwiY29uc29sZSIsImxvZyIsImNlbGxSb3ciLCJOdW1iZXIiLCJkYXRhc2V0Iiwicm93IiwiY2VsbENvbHVtbiIsImNvbHVtbiIsInNlbmRBdHRhY2siLCJhY3Rpb24iLCJjb21wdXRlckdhbWVib2FyZEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2VsbEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjZWxsRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0Q2VsbCIsInRhcmdldCIsImRhdGFTdHJpbmciLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZGF0YU9iamVjdCIsIkpTT04iLCJwYXJzZSIsImNlbGxDb29yZGluYXRlcyIsInNoaXBMZW5ndGgiLCJob3Jpem9udGFsIiwiY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyIsInZlcnRpY2FsIiwiaXNWYWxpZEdhbWVib2FyZENlbGwiLCJzaGlwQ29vcmRpbmF0ZXMiLCJ0YXJnZXRDZWxsUm93IiwidGFyZ2V0Q2VsbENvbHVtbiIsImNvb3JkaW5hdGVzQXJyYXkiLCJyZW1haW5pbmdDZWxsIiwicHVzaCIsImFkZFNoaXBUb0RPTSIsImFkZFNoaXBUb0dhbWVib2FyZCIsIklEIiwiZWxlbWVudElEIiwiaW1hZ2VFbGVtZW50IiwiYnV0dG9uRWxlbWVudCIsInBhcmVudE5vZGUiLCJkaXNhYmxlSW1hZ2VCdXR0b25JbnRlcmFjdGlvbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5pdGlhbGl6ZUJvYXJkRE9NIiwiaHVtYW5QbGF5ZXJHYW1lYm9hcmRET00iLCJjb21wdXRlckdhbWVib2FyZERPTSIsInJvdGF0ZVNoaXBJbWFnZSIsImltYWdlIiwiaW1hZ2VDbGFzc2VzIiwicmVtb3ZlIiwicm90YXRlRHJhZ2dlZEltYWdlIiwiY2xvbmVkSW1hZ2VFbGVtZW50IiwiY2xvbmVOb2RlIiwidGVtcERpdiIsImNsb25lZEltYWdlRWxlbWVudENsYXNzZXMiLCJyb3RhdGVQZXJMZW5ndGgiLCJib2R5Iiwic2V0RHJhZ0ltYWdlIiwic2V0VGltZW91dCIsInJlbW92ZUNoaWxkIiwiZ2V0RHJhZ2dlZEltYWdlIiwic3JjIiwiZ2V0QXR0cmlidXRlIiwic3RyaW5naWZ5Iiwic2V0RGF0YSIsImFkZEF0dGFja1Jlc3VsdERPTSIsInBsYXllclR5cGUiLCJhdHRhY2tSZXN1bHRzIiwiY29vcmRpbmF0ZXMiLCJhdHRhY2tSZXN1bHRzRWxlbWVudCIsIlBsYXllciIsImNvbXB1dGVyUGxheWVyIiwicGxheWVyR2FtZWJvYXJkIiwiYm9hcmQiLCJ1bmRlZmluZWQiLCJjcmVhdGVCb2FyZCIsInBsYWNlZFNoaXBzIiwicmVjZWl2ZWRNaXNzZWRTaG90cyIsInJlY2VpdmVkSGl0U2hvdHMiLCJzZW50TWlzc2VkU2hvdHMiLCJzZW50SGl0U2hvdHMiLCJhbGxTaGlwc1N1bmsiLCJnZXRDb29yZGluYXRlcyIsImdldFJlY2VpdmVkTWlzc2VkU2hvdHMiLCJnZXRSZWNlaXZlZEhpdFNob3RzIiwiZ2V0U2VudE1pc3NlZFNob3RzIiwiZ2V0U2VudEhpdFNob3RzIiwiaXNBbGxTaGlwc1N1bmsiLCJwbGFjZVNoaXAiLCJzaGlwIiwiY29vcmRpbmF0ZXNMaXN0IiwicmVjZWl2ZUF0dGFjayIsImVudGl0eUF0Q29vcmRpbmF0ZXMiLCJoaXQiLCJldmVyeSIsImlzU3VuayIsImFkZFNlbnRNaXNzZWRTaG90IiwiYWRkU2VudEhpdFNob3QiLCJHYW1lYm9hcmQiLCJvcHBvc2luZ1BsYXllciIsImlzQ29tcHV0ZXIiLCJnaXZlbkxlbmd0aCIsImhpdHMiLCJzdW5rIiwiZ2V0U2hpcExlbmd0aCIsImdldFNoaXBIaXRzIiwiU2hpcCIsImNoZWNrSWZQcmV2aW91c2x5QXR0YWNrZWQiLCJpc0luUHJvZ3Jlc3MiLCJvcHBvc2luZ1BsYXllckdhbWVib2FyZCIsImVuZEdhbWUiLCJ0b2dnbGVNaWRBdHRhY2siLCJzZW5kQ29tcHV0ZXJBdHRhY2siLCJnZW5lcmF0ZUNvbXB1dGVyU2hpcENvb3JkaW5hdGVzIiwibGlzdE9mQ29vcmRpbmF0ZXMiLCJzdGFydGluZ0Nvb3JkaW5hdGVzIiwiZ2VuZXJhdGVTdGFydGluZ0Nvb3JkaW5hdGVzIiwibm9uU3RhcnRpbmdDb29yZGluYXRlcyIsImdlbmVyYXRlTm9uU3RhcnRpbmdDb29yZGluYXRlcyIsImNvbmNhdCIsImdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSIsInBvc3NpYmxlQ29vcmRpbmF0ZXMiLCJ1cENvb3JkaW5hdGVzIiwicmlnaHRDb29yZGluYXRlcyIsImRvd25Db29yZGluYXRlcyIsImxlZnRDb29yZGluYXRlcyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImF0dGFja0Nvb3JkaW5hdGVzIiwicHJldmlvdXNseUF0dGFja2VkIiwic29tZSIsInNob3QiLCJkaXJlY3Rpb24iLCJnZXRPcHBvc2luZ1BsYXllciIsInNldE9wcG9zaW5nUGxheWVyIiwicGxheWVyIiwiaW5pdGlhbGl6ZUNvbXB1dGVyR2FtZWJvYXJkIiwibGVuZ3Roc09mU2hpcHMiLCJnZW5lcmF0ZUF0dGFja0Nvb3JkaW5hdGVzIiwicGxheWVycyIsIndpbm5lciIsImluUHJvZ3Jlc3MiLCJtaWRBdHRhY2siLCJnZXRXaW5uZXIiLCJzdGF0ZSIsImNyZWF0ZUdhbWUiLCJodW1hblBsYXllciIsImxvc2VyUGxheWVyIiwid2lubmVyUGxheWVyIiwic2V0V2lubmVyIiwicmVzZXRHYW1lIiwiRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIiLCJncm91cE9mRWxlbWVudHMiXSwic291cmNlUm9vdCI6IiJ9