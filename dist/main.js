(()=>{"use strict";const e=(()=>{const e=e=>{const s=["A","B","C","D","E","F","G","H","I","J"],i=["1","2","3","4","5","6","7","8","9","10"],d=a.getPlayers()[0];for(let n=-1;n<10;n++)for(let l=-1;l<10;l++)if(-1===n)if(-1===l){const t=document.createElement("div");t.classList.add("gameboard-label"),t.style.visibility="hidden",e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("column-label"),t.textContent=s[l],e.appendChild(t)}else if(-1===l){const t=document.createElement("div");t.classList.add("row-label"),t.textContent=i[n],e.appendChild(t)}else if(Array.from(e.classList).includes("player-board")){const a=document.createElement("div");a.setAttribute("data-row",n),a.setAttribute("data-column",l),a.classList.add("gameboard-cell"),a.addEventListener("dragover",(e=>{r(e)})),a.addEventListener("drop",(e=>{o(e),5===d.getGameboard().getPlacedShips().length&&t("enable")})),e.appendChild(a)}else if(Array.from(e.classList).includes("computer-board")){const t=document.createElement("button");t.setAttribute("data-row",n),t.setAttribute("data-column",l),t.classList.add("gameboard-cell"),t.disabled=!0,t.addEventListener("click",(()=>{if(!a.isMidAttack()){const e=Number(t.dataset.row),a=Number(t.dataset.column);d.sendAttack([e,a])}})),e.appendChild(t)}},t=e=>{const t=document.querySelector(".computer-board"),a=Array.from(t.querySelectorAll(".gameboard-cell"));"enable"===e?a.forEach((e=>{e.disabled=!1})):"disable"===e&&a.forEach((e=>{e.disabled=!0}))},r=e=>{e.preventDefault()},s=()=>{const e=document.createElement("p");e.textContent="That is an invalid position.",e.classList.add("error-message"),document.body.appendChild(e),setTimeout((()=>{document.body.removeChild(e)}),2500)},o=e=>{e.preventDefault();const t=a.getPlayers()[0],r=e.target;if(Array.from(r.classList).includes("contains-ship-image"))return void s();const i=e.dataTransfer.getData("image"),d=JSON.parse(i);if(!((e,t)=>{const r=[Number(e.dataset.row),Number(e.dataset.column)],s=Number(t.shipLength);return t.horizontal?!!a.getPlayers()[0].checkIfValidEmptyCoordinates(r,s,"right"):t.vertical?!!a.getPlayers()[0].checkIfValidEmptyCoordinates(r,s,"down"):void 0})(r,d))return void s();const n=((e,t)=>{const a=t.shipLength,r=Number(e.dataset.row),s=Number(e.dataset.column),o=[[r,s]];e.classList.add("contains-ship-image"),e.classList.add("ship-image"),e.classList.add(`ship-image-${a}`),e.classList.add(`ship-image-${a}-1`),t.horizontal?e.classList.add("horizontal"):t.vertical&&e.classList.add("vertical");for(let e=1;e<a;e++){let i;t.horizontal?(i=document.querySelector(`.player-board [data-row='${r}'][data-column='${s+e}']`),i.classList.add("horizontal"),o.push([r,s+e])):t.vertical&&(i=document.querySelector(`.player-board [data-row='${r+e}'][data-column='${s}']`),i.classList.add("vertical"),o.push([r+e,s])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${e+1}`)}return o})(r,d);t.addShipToGameboard(Number(d.shipLength),n),(e=>{const t=e.elementID,a=document.querySelector(`#${t}`),r=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),r.disabled=!0})(d),r.removeEventListener("drop",o)};return{initializeBoardDOM:()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".computer-board");e(t),e(a)},insertDraggedImage:o,rotateShipImage:e=>{const t=Array.from(e.classList);t.includes("horizontal")?(e.classList.remove("horizontal"),e.classList.add("vertical")):t.includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))},rotateDraggedImage:e=>{const t=e.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((e,t)=>{const a=Array.from(t.classList);a.includes("horizontal")?e.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(e.classList.add("temp-rotate-vertical"),"5"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-5"):"4"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-4"):"3"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-3"):"2"===t.dataset.shipLength&&e.classList.add("temp-rotate-vertical-2"))})(a,t),a.appendChild(t),document.body.appendChild(a),e.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:e=>{const t={image:e.target.src,shipLength:e.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:e.target.getAttribute("id")};Array.from(e.target.classList).includes("horizontal")?t.horizontal=!0:Array.from(e.target.classList).includes("vertical")&&(t.vertical=!0);const a=JSON.stringify(t);e.dataTransfer.setData("image",a)},dragOver:r,addAttackResultDOM:(e,t,a)=>{const r=a[0],s=a[1],o=document.querySelector(`.${e}-board`).querySelector(`[data-row='${r}'][data-column='${s}']`),i=document.createElement("img");i.classList.add("attack-results"),o.appendChild(i),"hit"===t?i.setAttribute("src","../dist/red_X.png"):i.setAttribute("src","../dist/white_O.png"),o.disabled=!0},toggleAbilityToAttack:t,displayWinner:e=>{const t=e.isComputer();document.querySelector(".game-results").classList.remove("default-hidden");document.querySelector(".display-winner").textContent=t?"Oh no, you lost! Try again!":"Congratulations, you won!"},resetDOM:()=>{document.querySelector(".player-board").innerHTML="",document.querySelector(".computer-board").innerHTML="",Array.from(document.querySelectorAll(".ship-piece")).forEach((e=>{e.setAttribute("draggable",!0),e.classList.remove("disabled-image"),Array.from(e.classList).includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))})),Array.from(document.querySelectorAll(".rotate-ship")).forEach((e=>{e.disabled=!1})),(()=>{const e=document.querySelector(".game-results");e.classList.add("default-hidden"),e.querySelector(".display-winner").textContent="Placeholder"})()}}})(),t=t=>{const r="human"!==t&&("computer"===t||void 0),s=(()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){e.push([]);for(let a=0;a<10;a++)e[t].push(void 0)}return e})(),t=[],a=[],r=[],s=[],o=[];let i=!1;const d=t=>e[t[0]][t[1]];return{getCoordinates:d,getPlacedShips:()=>t,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>r,getSentMissedShots:()=>s,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,r)=>{for(const t of r)e[t[0]][t[1]]=a;t.push(a)},receiveAttack:e=>{const s=d(e);return void 0!==s?(s.hit(),t.every((e=>e.isSunk()))&&(i=!0),r.push(e),"hit"):(a.push(e),"miss")},addSentMissedShot:e=>{s.push(e)},addSentHitShot:e=>{o.push(e)}}})();let o;const i=()=>r,d=(e,t)=>{const a=(e=>{const t=e;let a=0,r=!1;return{getShipLength:()=>t,getShipHits:()=>a,isSunk:()=>r,hit:()=>{if(r)return"That ship has already been sunk!";a+=1,a===t&&(r=!0)}}})(e);s.placeShip(a,t)},n=t=>{if(h(t)||!a.isInProgress()||a.isMidAttack())return;const r=o.getGameboard(),d=o.receiveAttack(t);if("hit"===d){if(s.addSentHitShot(t),i()?i()&&e.addAttackResultDOM("player",d,t):e.addAttackResultDOM("computer",d,t),r.isAllShipsSunk())return void a.endGame(o)}else"miss"===d&&(s.addSentMissedShot(t),i()?i()&&e.addAttackResultDOM("player",d,t):e.addAttackResultDOM("computer",d,t));if(o.isComputer()){a.toggleMidAttack(!0);const e=1e3*(Math.floor(4*Math.random())+1);setTimeout((()=>{a.toggleMidAttack(!1),o.sendComputerAttack()}),e)}},l=e=>{let t=[];do{t=[];const a=c(),r=u(a,e);t.push(a),t=t.concat(r)}while(t.length<e);return t},c=()=>{const e=[void 0,void 0];do{e[0]=m(),e[1]=m()}while(void 0!==s.getCoordinates(e));return e},u=(e,t)=>{const a=[];if(p(e,t,"up")){const r=[];for(let a=1;a<t;a++)r.push([e[0]-a,e[1]]);a.push(r)}if(p(e,t,"right")){const r=[];for(let a=1;a<t;a++)r.push([e[0],e[1]+a]);a.push(r)}if(p(e,t,"down")){const r=[];for(let a=1;a<t;a++)r.push([e[0]+a,e[1]]);a.push(r)}if(p(e,t,"left")){const r=[];for(let a=1;a<t;a++)r.push([e[0],e[1]-a]);a.push(r)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},m=()=>Math.floor(10*Math.random()),h=e=>{let t=!1;const a=o.getGameboard().getReceivedMissedShots(),r=o.getGameboard().getReceivedHitShots();return t=a.some((t=>t[0]===e[0]&&t[1]===e[1])),t||(t=r.some((t=>t[0]===e[0]&&t[1]===e[1]))),t},p=(e,t,a)=>{switch(a){case"up":if(e[0]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0]-a,e[1]]))return!1;return!0;case"right":if(e[1]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0],e[1]+a]))return!1;return!0;case"down":if(e[0]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0]+a,e[1]]))return!1;return!0;case"left":if(e[1]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0],e[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>s,getOpposingPlayer:()=>o,setOpposingPlayer:e=>{o=e},addShipToGameboard:d,sendAttack:n,initializeComputerGameboard:()=>{if(!r)return;const e=[5,4,3,3,2];for(const t of e){const e=l(t);d(t,e)}},sendComputerAttack:()=>{if(!r||!a.isInProgress())return;const e=(()=>{const e=[void 0,void 0];do{e[0]=m(),e[1]=m()}while(h(e));return e})();n(e)},receiveAttack:e=>s.receiveAttack(e),checkIfValidEmptyCoordinates:p}},a=(()=>{const a=[];let r,s=!0,o=!1;const i=()=>{const e=t("human");a.push(e);const r=t("computer");a.push(r),e.setOpposingPlayer(r),r.setOpposingPlayer(e),r.initializeComputerGameboard()},d=()=>{a.length=0,s=!0,r=void 0};return{getPlayers:()=>a,isInProgress:()=>s,getWinner:()=>r,isMidAttack:()=>o,toggleMidAttack:e=>{o=!!e},createGame:i,endGame:t=>{const a=t.getOpposingPlayer();s=!1,r=a,e.toggleAbilityToAttack("disable"),e.displayWinner(r)},resetGame:()=>{d(),e.resetDOM(),i(),e.initializeBoardDOM()},resetGameLoopState:d}})(),r=()=>{document.querySelectorAll(".ship-placement").forEach((t=>{const a=t.querySelector("img");t.querySelector("button").addEventListener("click",(()=>{e.rotateShipImage(a)}))}))},s=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((t=>{t.addEventListener("dragstart",(t=>{e.getDraggedImage(t),e.rotateDraggedImage(t)}))}))},o=()=>{document.querySelector(".play-again").addEventListener("click",(()=>{a.resetGame()}))};a.createGame(),e.initializeBoardDOM(),r(),s(),o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,