(()=>{"use strict";const t=(()=>{const t=t=>{const r=["A","B","C","D","E","F","G","H","I","J"],o=["1","2","3","4","5","6","7","8","9","10"];for(let i=-1;i<10;i++)for(let n=-1;n<10;n++)if(-1===i)if(-1===n){const e=document.createElement("div");e.classList.add("gameboard-label"),e.style.visibility="hidden",t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("column-label"),e.textContent=r[n],t.appendChild(e)}else if(-1===n){const e=document.createElement("div");e.classList.add("row-label"),e.textContent=o[i],t.appendChild(e)}else if(Array.from(t.classList).includes("player-board")){const a=document.createElement("div");a.setAttribute("data-row",i),a.setAttribute("data-column",n),a.classList.add("gameboard-cell"),a.addEventListener("dragover",(t=>{e(t)})),a.addEventListener("drop",(t=>{s(t)})),t.appendChild(a)}else if(Array.from(t.classList).includes("opponent-board")){const e=document.createElement("button");e.setAttribute("data-row",i),e.setAttribute("data-column",n),e.classList.add("gameboard-cell"),e.addEventListener("click",(t=>{console.log(e);const s=Number(e.dataset.row),r=Number(e.dataset.column);a.getPlayers()[0].sendAttack([s,r])})),t.appendChild(e)}},e=()=>{event.preventDefault()},s=t=>{t.preventDefault();const e=t.target;if(Array.from(e.classList).includes("contains-ship-image"))return;const r=t.dataTransfer.getData("image"),o=JSON.parse(r);if(!((t,e)=>{const s=[Number(t.dataset.row),Number(t.dataset.column)],r=Number(e.shipLength);return e.horizontal?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):e.vertical?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(e,o))return;const i=((t,e)=>{const a=e.shipLength,s=Number(t.dataset.row),r=Number(t.dataset.column),o=[[s,r]];t.classList.add("contains-ship-image"),t.classList.add("ship-image"),t.classList.add(`ship-image-${a}`),t.classList.add(`ship-image-${a}-1`),e.horizontal?t.classList.add("horizontal"):e.vertical&&t.classList.add("vertical");for(let t=1;t<a;t++){let i;e.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+t}']`),i.classList.add("horizontal"),o.push([s,r+t])):e.vertical&&(i=document.querySelector(`.player-board [data-row='${s+t}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+t,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${t+1}`)}return o})(e,o);a.getPlayers()[0].addShipToGameboard(Number(o.shipLength),i),(t=>{const e=t.elementID,a=document.querySelector(`#${e}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),e.removeEventListener("drop",s)};return{initializeBoardDOM:()=>{const e=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");t(e),t(a)},insertDraggedImage:s,rotateShipImage:t=>{const e=Array.from(t.classList);e.includes("horizontal")?(t.classList.remove("horizontal"),t.classList.add("vertical")):e.includes("vertical")&&(t.classList.remove("vertical"),t.classList.add("horizontal"))},rotateDraggedImage:t=>{const e=t.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((t,e)=>{const a=Array.from(e.classList);a.includes("horizontal")?t.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(t.classList.add("temp-rotate-vertical"),"5"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-5"):"4"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-4"):"3"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-3"):"2"===e.dataset.shipLength&&t.classList.add("temp-rotate-vertical-2"))})(a,e),a.appendChild(e),document.body.appendChild(a),t.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:t=>{const e={image:t.target.src,shipLength:t.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:t.target.getAttribute("id")};Array.from(t.target.classList).includes("horizontal")?e.horizontal=!0:Array.from(t.target.classList).includes("vertical")&&(e.vertical=!0),console.log(e);const a=JSON.stringify(e);t.dataTransfer.setData("image",a)},dragOver:e,addAttackResultDOM:(t,e,a)=>{const s=a[0],r=a[1];console.log(t);const o=document.querySelector(`.${t}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`),i=document.createElement("img");i.classList.add("attack-results"),o.appendChild(i),"hit"===e?i.setAttribute("src","../dist/red_X.png"):i.setAttribute("src","../dist/white_O.png")}}})(),e=e=>{const s="human"!==e&&("computer"===e||void 0),r=(()=>{const t=(()=>{const t=[];for(let e=0;e<10;e++){t.push([]);for(let a=0;a<10;a++)t[e].push(void 0)}return t})(),e=[],a=[],s=[],r=[],o=[];let i=!1;const n=e=>t[e[0]][e[1]];return{getCoordinates:n,getPlacedShips:()=>e,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const e of s)t[e[0]][e[1]]=a;e.push(a)},receiveAttack:t=>{const r=n(t);return void 0!==r?(r.hit(),e.every((t=>t.isSunk()))&&(i=!0),s.push(t),"hit"):(a.push(t),"miss")},addSentMissedShot:t=>{r.push(t)},addSentHitShot:t=>{o.push(t)}}})();let o;const i=()=>s,n=(t,e)=>{const a=(t=>{const e=t;let a=0,s=!1;return{getShipLength:()=>e,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===e&&(s=!0)}}})(t);r.placeShip(a,e)},d=e=>{const s=o.getGameboard(),n=o.receiveAttack(e);if("hit"===n){if(r.addSentHitShot(e),i()?i()&&t.addAttackResultDOM("player",n,e):t.addAttackResultDOM("opponent",n,e),s.isAllShipsSunk())return void a.endGame(o)}else"miss"===n&&(r.addSentMissedShot(e),i()?i()&&t.addAttackResultDOM("player",n,e):t.addAttackResultDOM("opponent",n,e));o.isComputer()&&o.sendComputerAttack()},l=t=>{let e=[];do{e=[];const a=c(),s=u(a,t);e.push(a),e=e.concat(s)}while(e.length<t);return e},c=()=>{const t=[void 0,void 0];do{t[0]=h(),t[1]=h()}while(void 0!==r.getCoordinates(t));return t},u=(t,e)=>{const a=[];if(m(t,e,"up")){const s=[];for(let a=1;a<e;a++)s.push([t[0]-a,t[1]]);a.push(s)}if(m(t,e,"right")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]+a]);a.push(s)}if(m(t,e,"down")){const s=[];for(let a=1;a<e;a++)s.push([t[0]+a,t[1]]);a.push(s)}if(m(t,e,"left")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},h=()=>Math.floor(10*Math.random()),p=(t,e)=>t.some((t=>t[0]===e[0]&&t[1]===e[1])),m=(t,e,a)=>{switch(a){case"up":if(t[0]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]-a,t[1]]))return!1;return!0;case"right":if(t[1]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]+a]))return!1;return!0;case"down":if(t[0]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]+a,t[1]]))return!1;return!0;case"left":if(t[1]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>r,getOpposingPlayer:()=>o,setOpposingPlayer:t=>{o=t},addShipToGameboard:n,sendAttack:d,initializeComputerGameboard:()=>{if(!s)return;const t=[5,4,3,3,2];for(const e of t){const t=l(e);n(e,t)}},sendComputerAttack:()=>{if(!s)return;const t=(()=>{const t=o.getGameboard().getReceivedMissedShots(),e=o.getGameboard().getReceivedHitShots(),a=[void 0,void 0];do{a[0]=h(),a[1]=h()}while(p(t,a)||p(e,a));return a})();d(t)},receiveAttack:t=>r.receiveAttack(t),checkIfValidEmptyCoordinates:m}},a=(()=>{const t=[];let a,s=!0;return{getPlayers:()=>t,isInProgress:()=>s,getWinner:()=>a,createGame:()=>{const a=e("human");t.push(a);const s=e("computer");t.push(s),a.setOpposingPlayer(s),s.setOpposingPlayer(a),s.initializeComputerGameboard()},endGame:t=>{s=!1,(t=>{const e=t.getOpposingPlayer();a=e})(t)},resetGame:()=>{t.length=0,s=!0,a=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((e=>{const a=e.children[0];e.children[2].addEventListener("click",(()=>{t.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((e=>{e.addEventListener("dragstart",(e=>{t.getDraggedImage(e),t.rotateDraggedImage(e)}))}))};a.createGame(),t.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,