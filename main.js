(()=>{"use strict";const e=(()=>{const e=e=>{const o=["A","B","C","D","E","F","G","H","I","J"],i=["1","2","3","4","5","6","7","8","9","10"];for(let n=-1;n<10;n++)for(let d=-1;d<10;d++)if(-1===n)if(-1===d){const t=document.createElement("div");t.classList.add("gameboard-label"),t.style.visibility="hidden",e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("column-label"),t.textContent=o[d],e.appendChild(t)}else if(-1===d){const t=document.createElement("div");t.classList.add("row-label"),t.textContent=i[n],e.appendChild(t)}else if(Array.from(e.classList).includes("player-board")){const o=document.createElement("div");o.setAttribute("data-row",n),o.setAttribute("data-column",d),o.classList.add("gameboard-cell"),o.addEventListener("dragover",(e=>{s(e)})),o.addEventListener("drop",(e=>{r(e),5===a.getPlayers()[0].getGameboard().getPlacedShips().length&&t("enable")})),e.appendChild(o)}else if(Array.from(e.classList).includes("opponent-board")){const t=document.createElement("button");t.setAttribute("data-row",n),t.setAttribute("data-column",d),t.classList.add("gameboard-cell"),t.disabled=!0,t.addEventListener("click",(e=>{console.log(t);const s=Number(t.dataset.row),r=Number(t.dataset.column);a.getPlayers()[0].sendAttack([s,r])})),e.appendChild(t)}},t=e=>{const t=document.querySelector(".opponent-board"),a=Array.from(t.querySelectorAll(".gameboard-cell"));"enable"===e?a.forEach((e=>{e.disabled=!1})):"disable"===e&&a.forEach((e=>{e.disabled=!0}))},s=()=>{event.preventDefault()},r=e=>{e.preventDefault();const t=e.target;if(Array.from(t.classList).includes("contains-ship-image"))return;const s=e.dataTransfer.getData("image"),o=JSON.parse(s);if(!((e,t)=>{const s=[Number(e.dataset.row),Number(e.dataset.column)],r=Number(t.shipLength);return t.horizontal?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):t.vertical?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(t,o))return;const i=((e,t)=>{const a=t.shipLength,s=Number(e.dataset.row),r=Number(e.dataset.column),o=[[s,r]];e.classList.add("contains-ship-image"),e.classList.add("ship-image"),e.classList.add(`ship-image-${a}`),e.classList.add(`ship-image-${a}-1`),t.horizontal?e.classList.add("horizontal"):t.vertical&&e.classList.add("vertical");for(let e=1;e<a;e++){let i;t.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+e}']`),i.classList.add("horizontal"),o.push([s,r+e])):t.vertical&&(i=document.querySelector(`.player-board [data-row='${s+e}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+e,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${e+1}`)}return o})(t,o);a.getPlayers()[0].addShipToGameboard(Number(o.shipLength),i),(e=>{const t=e.elementID,a=document.querySelector(`#${t}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),t.removeEventListener("drop",r)};return{initializeBoardDOM:()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");e(t),e(a)},insertDraggedImage:r,rotateShipImage:e=>{const t=Array.from(e.classList);t.includes("horizontal")?(e.classList.remove("horizontal"),e.classList.add("vertical")):t.includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))},rotateDraggedImage:e=>{const t=e.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((e,t)=>{const a=Array.from(t.classList);a.includes("horizontal")?e.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(e.classList.add("temp-rotate-vertical"),"5"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-5"):"4"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-4"):"3"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-3"):"2"===t.dataset.shipLength&&e.classList.add("temp-rotate-vertical-2"))})(a,t),a.appendChild(t),document.body.appendChild(a),e.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:e=>{const t={image:e.target.src,shipLength:e.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:e.target.getAttribute("id")};Array.from(e.target.classList).includes("horizontal")?t.horizontal=!0:Array.from(e.target.classList).includes("vertical")&&(t.vertical=!0),console.log(t);const a=JSON.stringify(t);e.dataTransfer.setData("image",a)},dragOver:s,addAttackResultDOM:(e,t,a)=>{const s=a[0],r=a[1];console.log(e);const o=document.querySelector(`.${e}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`),i=document.createElement("img");i.classList.add("attack-results"),o.appendChild(i),"hit"===t?i.setAttribute("src","../dist/red_X.png"):i.setAttribute("src","../dist/white_O.png"),o.disabled=!0},toggleAbilityToAttack:t}})(),t=t=>{const s="human"!==t&&("computer"===t||void 0),r=(()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){e.push([]);for(let a=0;a<10;a++)e[t].push(void 0)}return e})(),t=[],a=[],s=[],r=[],o=[];let i=!1;const n=t=>e[t[0]][t[1]];return{getCoordinates:n,getPlacedShips:()=>t,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const t of s)e[t[0]][t[1]]=a;t.push(a)},receiveAttack:e=>{const r=n(e);return void 0!==r?(r.hit(),t.every((e=>e.isSunk()))&&(i=!0),s.push(e),"hit"):(a.push(e),"miss")},addSentMissedShot:e=>{r.push(e)},addSentHitShot:e=>{o.push(e)}}})();let o;const i=()=>s,n=(e,t)=>{const a=(e=>{const t=e;let a=0,s=!1;return{getShipLength:()=>t,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===t&&(s=!0)}}})(e);r.placeShip(a,t)},d=t=>{if(p(t)||!a.isInProgress())return;const s=o.getGameboard(),n=o.receiveAttack(t);if("hit"===n){if(r.addSentHitShot(t),i()?i()&&e.addAttackResultDOM("player",n,t):e.addAttackResultDOM("opponent",n,t),s.isAllShipsSunk())return void a.endGame(o)}else"miss"===n&&(r.addSentMissedShot(t),i()?i()&&e.addAttackResultDOM("player",n,t):e.addAttackResultDOM("opponent",n,t));o.isComputer()&&o.sendComputerAttack()},l=e=>{let t=[];do{t=[];const a=c(),s=u(a,e);t.push(a),t=t.concat(s)}while(t.length<e);return t},c=()=>{const e=[void 0,void 0];do{e[0]=h(),e[1]=h()}while(void 0!==r.getCoordinates(e));return e},u=(e,t)=>{const a=[];if(m(e,t,"up")){const s=[];for(let a=1;a<t;a++)s.push([e[0]-a,e[1]]);a.push(s)}if(m(e,t,"right")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]+a]);a.push(s)}if(m(e,t,"down")){const s=[];for(let a=1;a<t;a++)s.push([e[0]+a,e[1]]);a.push(s)}if(m(e,t,"left")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},h=()=>Math.floor(10*Math.random()),p=e=>{let t=!1;const a=o.getGameboard().getReceivedMissedShots(),s=o.getGameboard().getReceivedHitShots();return t=a.some((t=>t[0]===e[0]&&t[1]===e[1])),t||(t=s.some((t=>t[0]===e[0]&&t[1]===e[1]))),t},m=(e,t,a)=>{switch(a){case"up":if(e[0]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]-a,e[1]]))return!1;return!0;case"right":if(e[1]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]+a]))return!1;return!0;case"down":if(e[0]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]+a,e[1]]))return!1;return!0;case"left":if(e[1]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>r,getOpposingPlayer:()=>o,setOpposingPlayer:e=>{o=e},addShipToGameboard:n,sendAttack:d,initializeComputerGameboard:()=>{if(!s)return;const e=[5,4,3,3,2];for(const t of e){const e=l(t);n(t,e)}},sendComputerAttack:()=>{if(!s||!a.isInProgress())return;const e=(()=>{const e=[void 0,void 0];do{e[0]=h(),e[1]=h()}while(p(e));return e})();d(e)},receiveAttack:e=>r.receiveAttack(e),checkIfValidEmptyCoordinates:m}},a=(()=>{const e=[];let a,s=!0;return{getPlayers:()=>e,isInProgress:()=>s,getWinner:()=>a,createGame:()=>{const a=t("human");e.push(a);const s=t("computer");e.push(s),a.setOpposingPlayer(s),s.setOpposingPlayer(a),s.initializeComputerGameboard()},endGame:e=>{s=!1,(e=>{const t=e.getOpposingPlayer();a=t})(e)},resetGame:()=>{e.length=0,s=!0,a=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((t=>{const a=t.children[0];t.children[2].addEventListener("click",(()=>{e.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((t=>{t.addEventListener("dragstart",(t=>{e.getDraggedImage(t),e.rotateDraggedImage(t)}))}))};a.createGame(),e.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,