(()=>{"use strict";const t=(()=>{const t=t=>{const i=["A","B","C","D","E","F","G","H","I","J"],o=["1","2","3","4","5","6","7","8","9","10"],d=a.getPlayers()[0];for(let n=-1;n<10;n++)for(let l=-1;l<10;l++)if(-1===n)if(-1===l){const e=document.createElement("div");e.classList.add("gameboard-label"),e.style.visibility="hidden",t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("column-label"),e.textContent=i[l],t.appendChild(e)}else if(-1===l){const e=document.createElement("div");e.classList.add("row-label"),e.textContent=o[n],t.appendChild(e)}else if(Array.from(t.classList).includes("player-board")){const a=document.createElement("div");a.setAttribute("data-row",n),a.setAttribute("data-column",l),a.classList.add("gameboard-cell"),a.addEventListener("dragover",(t=>{s(t)})),a.addEventListener("drop",(t=>{r(t),5===d.getGameboard().getPlacedShips().length&&e("enable")})),t.appendChild(a)}else if(Array.from(t.classList).includes("computer-board")){const e=document.createElement("button");e.setAttribute("data-row",n),e.setAttribute("data-column",l),e.classList.add("gameboard-cell"),e.disabled=!0,e.addEventListener("click",(()=>{if(!a.isMidAttack()){const t=Number(e.dataset.row),a=Number(e.dataset.column);d.sendAttack([t,a])}})),t.appendChild(e)}},e=t=>{const e=document.querySelector(".computer-board"),a=Array.from(e.querySelectorAll(".gameboard-cell"));"enable"===t?a.forEach((t=>{t.disabled=!1})):"disable"===t&&a.forEach((t=>{t.disabled=!0}))},s=t=>{t.preventDefault()},r=t=>{t.preventDefault();const e=a.getPlayers()[0],s=t.target;if(Array.from(s.classList).includes("contains-ship-image"))return;const i=t.dataTransfer.getData("image"),o=JSON.parse(i);if(!((t,e)=>{const s=[Number(t.dataset.row),Number(t.dataset.column)],r=Number(e.shipLength);return e.horizontal?!!a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right"):e.vertical?!!a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down"):void 0})(s,o))return;const d=((t,e)=>{const a=e.shipLength,s=Number(t.dataset.row),r=Number(t.dataset.column),i=[[s,r]];t.classList.add("contains-ship-image"),t.classList.add("ship-image"),t.classList.add(`ship-image-${a}`),t.classList.add(`ship-image-${a}-1`),e.horizontal?t.classList.add("horizontal"):e.vertical&&t.classList.add("vertical");for(let t=1;t<a;t++){let o;e.horizontal?(o=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+t}']`),o.classList.add("horizontal"),i.push([s,r+t])):e.vertical&&(o=document.querySelector(`.player-board [data-row='${s+t}'][data-column='${r}']`),o.classList.add("vertical"),i.push([s+t,r])),o.classList.add("contains-ship-image"),o.classList.add("ship-image"),o.classList.add(`ship-image-${a}`),o.classList.add(`ship-image-${a}-${t+1}`)}return i})(s,o);e.addShipToGameboard(Number(o.shipLength),d),(t=>{const e=t.elementID,a=document.querySelector(`#${e}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),s.removeEventListener("drop",r)};return{initializeBoardDOM:()=>{const e=document.querySelector(".player-board"),a=document.querySelector(".computer-board");t(e),t(a)},insertDraggedImage:r,rotateShipImage:t=>{const e=Array.from(t.classList);e.includes("horizontal")?(t.classList.remove("horizontal"),t.classList.add("vertical")):e.includes("vertical")&&(t.classList.remove("vertical"),t.classList.add("horizontal"))},rotateDraggedImage:t=>{const e=t.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((t,e)=>{const a=Array.from(e.classList);a.includes("horizontal")?t.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(t.classList.add("temp-rotate-vertical"),"5"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-5"):"4"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-4"):"3"===e.dataset.shipLength?t.classList.add("temp-rotate-vertical-3"):"2"===e.dataset.shipLength&&t.classList.add("temp-rotate-vertical-2"))})(a,e),a.appendChild(e),document.body.appendChild(a),t.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:t=>{const e={image:t.target.src,shipLength:t.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:t.target.getAttribute("id")};Array.from(t.target.classList).includes("horizontal")?e.horizontal=!0:Array.from(t.target.classList).includes("vertical")&&(e.vertical=!0);const a=JSON.stringify(e);t.dataTransfer.setData("image",a)},dragOver:s,addAttackResultDOM:(t,e,a)=>{const s=a[0],r=a[1],i=document.querySelector(`.${t}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`),o=document.createElement("img");o.classList.add("attack-results"),i.appendChild(o),"hit"===e?o.setAttribute("src","../dist/red_X.png"):o.setAttribute("src","../dist/white_O.png"),i.disabled=!0},toggleAbilityToAttack:e,displayWinner:t=>{const e=t.isComputer();document.querySelector(".game-results").classList.remove("default-hidden");document.querySelector(".display-winner").textContent=e?"Oh no, you lost! Try again!":"Congratulations, you won!"}}})(),e=e=>{const s="human"!==e&&("computer"===e||void 0),r=(()=>{const t=(()=>{const t=[];for(let e=0;e<10;e++){t.push([]);for(let a=0;a<10;a++)t[e].push(void 0)}return t})(),e=[],a=[],s=[],r=[],i=[];let o=!1;const d=e=>t[e[0]][e[1]];return{getCoordinates:d,getPlacedShips:()=>e,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>i,isAllShipsSunk:()=>o,placeShip:(a,s)=>{for(const e of s)t[e[0]][e[1]]=a;e.push(a)},receiveAttack:t=>{const r=d(t);return void 0!==r?(r.hit(),e.every((t=>t.isSunk()))&&(o=!0),s.push(t),"hit"):(a.push(t),"miss")},addSentMissedShot:t=>{r.push(t)},addSentHitShot:t=>{i.push(t)}}})();let i;const o=()=>s,d=(t,e)=>{const a=(t=>{const e=t;let a=0,s=!1;return{getShipLength:()=>e,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===e&&(s=!0)}}})(t);r.placeShip(a,e)},n=e=>{if(h(e)||!a.isInProgress()||a.isMidAttack())return;const s=i.getGameboard(),d=i.receiveAttack(e);if("hit"===d){if(r.addSentHitShot(e),o()?o()&&t.addAttackResultDOM("player",d,e):t.addAttackResultDOM("computer",d,e),s.isAllShipsSunk())return void a.endGame(i)}else"miss"===d&&(r.addSentMissedShot(e),o()?o()&&t.addAttackResultDOM("player",d,e):t.addAttackResultDOM("computer",d,e));i.isComputer()&&(a.toggleMidAttack(!0),setTimeout((()=>{a.toggleMidAttack(!1),i.sendComputerAttack()}),0))},l=t=>{let e=[];do{e=[];const a=c(),s=u(a,t);e.push(a),e=e.concat(s)}while(e.length<t);return e},c=()=>{const t=[void 0,void 0];do{t[0]=m(),t[1]=m()}while(void 0!==r.getCoordinates(t));return t},u=(t,e)=>{const a=[];if(p(t,e,"up")){const s=[];for(let a=1;a<e;a++)s.push([t[0]-a,t[1]]);a.push(s)}if(p(t,e,"right")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]+a]);a.push(s)}if(p(t,e,"down")){const s=[];for(let a=1;a<e;a++)s.push([t[0]+a,t[1]]);a.push(s)}if(p(t,e,"left")){const s=[];for(let a=1;a<e;a++)s.push([t[0],t[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},m=()=>Math.floor(10*Math.random()),h=t=>{let e=!1;const a=i.getGameboard().getReceivedMissedShots(),s=i.getGameboard().getReceivedHitShots();return e=a.some((e=>e[0]===t[0]&&e[1]===t[1])),e||(e=s.some((e=>e[0]===t[0]&&e[1]===t[1]))),e},p=(t,e,a)=>{switch(a){case"up":if(t[0]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]-a,t[1]]))return!1;return!0;case"right":if(t[1]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]+a]))return!1;return!0;case"down":if(t[0]+(e-1)>9)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0]+a,t[1]]))return!1;return!0;case"left":if(t[1]-(e-1)<0)return!1;for(let a=1;a<e;a++)if(void 0!==r.getCoordinates([t[0],t[1]-a]))return!1;return!0}};return{isComputer:o,getGameboard:()=>r,getOpposingPlayer:()=>i,setOpposingPlayer:t=>{i=t},addShipToGameboard:d,sendAttack:n,initializeComputerGameboard:()=>{if(!s)return;const t=[5,4,3,3,2];for(const e of t){const t=l(e);d(e,t)}},sendComputerAttack:()=>{if(!s||!a.isInProgress())return;const t=(()=>{const t=[void 0,void 0];do{t[0]=m(),t[1]=m()}while(h(t));return t})();n(t)},receiveAttack:t=>r.receiveAttack(t),checkIfValidEmptyCoordinates:p}},a=(()=>{const a=[];let s,r=!0,i=!1;return{getPlayers:()=>a,isInProgress:()=>r,getWinner:()=>s,isMidAttack:()=>i,toggleMidAttack:t=>{i=!!t},createGame:()=>{const t=e("human");a.push(t);const s=e("computer");a.push(s),t.setOpposingPlayer(s),s.setOpposingPlayer(t),s.initializeComputerGameboard()},endGame:e=>{const a=e.getOpposingPlayer();r=!1,s=a,t.toggleAbilityToAttack("disable"),t.displayWinner(s)},resetGame:()=>{a.length=0,r=!0,s=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((e=>{const a=e.querySelector("img");e.querySelector("button").addEventListener("click",(()=>{t.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((e=>{e.addEventListener("dragstart",(e=>{t.getDraggedImage(e),t.rotateDraggedImage(e)}))}))};a.createGame(),t.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,