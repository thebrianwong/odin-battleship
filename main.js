(()=>{"use strict";const e=e=>{const a="human"!==e&&("computer"===e||void 0),s=(()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){e.push([]);for(let a=0;a<10;a++)e[t].push(void 0)}return e})(),t=[],a=[],s=[],r=[],o=[];let i=!1;const n=t=>e[t[0]][t[1]];return{getCoordinates:n,getPlacedShips:()=>t,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const t of s)e[t[0]][t[1]]=a;t.push(a)},receiveAttack:e=>{const r=n(e);return void 0!==r?(r.hit(),t.every((e=>e.isSunk()))&&(i=!0),s.push(e),"hit"):(a.push(e),"miss")},addSentMissedShot:e=>{r.push(e)},addSentHitShot:e=>{o.push(e)}}})();let r;const o=(e,t)=>{const a=(e=>{const t=e;let a=0,s=!1;return{getShipLength:()=>t,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===t&&(s=!0)}}})(e);s.placeShip(a,t)},i=e=>{const a=r.getGameboard(),o=r.receiveAttack(e);if("hit"===o){if(s.addSentHitShot(e),a.isAllShipsSunk())return void t.endGame(r)}else"miss"===o&&s.addSentMissedShot(e);r.isComputer()&&r.sendComputerAttack()},n=e=>{let t=[];do{t=[];const a=d(),s=l(a,e);t.push(a),t=t.concat(s)}while(t.length<e);return t},d=()=>{const e=[void 0,void 0];do{e[0]=c(),e[1]=c()}while(void 0!==s.getCoordinates(e));return e},l=(e,t)=>{const a=[];if(u(e,t,"up")){const s=[];for(let a=1;a<t;a++)s.push([e[0]-a,e[1]]);a.push(s)}if(u(e,t,"right")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]+a]);a.push(s)}if(u(e,t,"down")){const s=[];for(let a=1;a<t;a++)s.push([e[0]+a,e[1]]);a.push(s)}if(u(e,t,"left")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},c=()=>Math.floor(10*Math.random()),h=(e,t)=>e.some((e=>e[0]===t[0]&&e[1]===t[1])),u=(e,t,a)=>{switch(a){case"up":if(e[0]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0]-a,e[1]]))return!1;return!0;case"right":if(e[1]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0],e[1]+a]))return!1;return!0;case"down":if(e[0]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0]+a,e[1]]))return!1;return!0;case"left":if(e[1]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==s.getCoordinates([e[0],e[1]-a]))return!1;return!0}};return{isComputer:()=>a,getGameboard:()=>s,getOpposingPlayer:()=>r,setOpposingPlayer:e=>{r=e},addShipToGameboard:o,sendAttack:i,initializeComputerGameboard:()=>{if(!a)return;const e=[5,4,3,3,2];for(const t of e){const e=n(t);o(t,e)}},sendComputerAttack:()=>{if(!a)return;const e=(()=>{const e=r.getGameboard().getReceivedMissedShots(),t=r.getGameboard().getReceivedHitShots(),a=[void 0,void 0];do{a[0]=c(),a[1]=c()}while(h(e,a)||h(t,a));return a})();i(e)},receiveAttack:e=>s.receiveAttack(e),checkIfValidEmptyCoordinates:u}},t=(()=>{const t=[];let a,s=!0;return{getPlayers:()=>t,isInProgress:()=>s,getWinner:()=>a,createGame:()=>{const a=e("human");t.push(a);const s=e("computer");t.push(s),a.setOpposingPlayer(s),s.setOpposingPlayer(a),s.initializeComputerGameboard()},endGame:e=>{s=!1,(e=>{const t=e.getOpposingPlayer();a=t})(e)},resetGame:()=>{t.length=0,s=!0,a=void 0}}})(),a=(()=>{const e=e=>{const t=["A","B","C","D","E","F","G","H","I","J"],r=["1","2","3","4","5","6","7","8","9","10"];for(let o=-1;o<10;o++)for(let i=-1;i<10;i++)if(-1===o)if(-1===i){const t=document.createElement("div");t.classList.add("gameboard-label"),t.style.visibility="hidden",e.appendChild(t)}else{const a=document.createElement("div");a.classList.add("column-label"),a.textContent=t[i],e.appendChild(a)}else if(-1===i){const t=document.createElement("div");t.classList.add("row-label"),t.textContent=r[o],e.appendChild(t)}else{const t=document.createElement("div");t.setAttribute("data-row",o),t.setAttribute("data-column",i),t.classList.add("gameboard-cell"),t.addEventListener("dragover",(e=>{a(e)})),t.addEventListener("drop",(e=>{s(e)})),e.appendChild(t)}},a=()=>{event.preventDefault()},s=e=>{e.preventDefault();const a=e.target;if(Array.from(a.classList).includes("contains-ship-image"))return;const r=e.dataTransfer.getData("image"),o=JSON.parse(r);if(!((e,a)=>{const s=[Number(e.dataset.row),Number(e.dataset.column)],r=Number(a.shipLength);return a.horizontal?t.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):a.vertical?t.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(a,o))return;const i=((e,t)=>{const a=t.shipLength,s=Number(e.dataset.row),r=Number(e.dataset.column),o=[[s,r]];e.classList.add("contains-ship-image"),e.classList.add("ship-image"),e.classList.add(`ship-image-${a}`),e.classList.add(`ship-image-${a}-1`),t.horizontal?e.classList.add("horizontal"):t.vertical&&e.classList.add("vertical");for(let e=1;e<a;e++){let i;t.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+e}']`),i.classList.add("horizontal"),o.push([s,r+e])):t.vertical&&(i=document.querySelector(`.player-board [data-row='${s+e}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+e,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${e+1}`)}return o})(a,o);t.getPlayers()[0].addShipToGameboard(Number(o.shipLength),i),(e=>{const t=e.elementID,a=document.querySelector(`#${t}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),a.removeEventListener("drop",s)};return{initializeBoardDOM:()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");e(t),e(a)},insertDraggedImage:s,rotateShipImage:e=>{const t=Array.from(e.classList);t.includes("horizontal")?(e.classList.remove("horizontal"),e.classList.add("vertical")):t.includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))},rotateDraggedImage:e=>{const t=e.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((e,t)=>{const a=Array.from(t.classList);a.includes("horizontal")?e.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(e.classList.add("temp-rotate-vertical"),"5"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-5"):"4"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-4"):"3"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-3"):"2"===t.dataset.shipLength&&e.classList.add("temp-rotate-vertical-2"))})(a,t),a.appendChild(t),document.body.appendChild(a),e.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:e=>{const t={image:e.target.src,shipLength:e.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:e.target.getAttribute("id")};Array.from(e.target.classList).includes("horizontal")?t.horizontal=!0:Array.from(e.target.classList).includes("vertical")&&(t.vertical=!0),console.log(t);const a=JSON.stringify(t);e.dataTransfer.setData("image",a)},dragOver:a}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((e=>{const t=e.children[0];e.children[2].addEventListener("click",(()=>{a.rotateShipImage(t)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((e=>{e.addEventListener("dragstart",(e=>{a.getDraggedImage(e),a.rotateDraggedImage(e)}))}))};t.createGame(),a.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,