(()=>{"use strict";const e=(()=>{const e=e=>{const o=["A","B","C","D","E","F","G","H","I","J"],i=["1","2","3","4","5","6","7","8","9","10"];for(let d=-1;d<10;d++)for(let n=-1;n<10;n++)if(-1===d)if(-1===n){const t=document.createElement("div");t.classList.add("gameboard-label"),t.style.visibility="hidden",e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("column-label"),t.textContent=o[n],e.appendChild(t)}else if(-1===n){const t=document.createElement("div");t.classList.add("row-label"),t.textContent=i[d],e.appendChild(t)}else if(Array.from(e.classList).includes("player-board")){const o=document.createElement("div");o.setAttribute("data-row",d),o.setAttribute("data-column",n),o.classList.add("gameboard-cell"),o.addEventListener("dragover",(e=>{s(e)})),o.addEventListener("drop",(e=>{r(e),5===a.getPlayers()[0].getGameboard().getPlacedShips().length&&t("enable")})),e.appendChild(o)}else if(Array.from(e.classList).includes("opponent-board")){const t=document.createElement("button");t.setAttribute("data-row",d),t.setAttribute("data-column",n),t.classList.add("gameboard-cell"),t.disabled=!0,t.addEventListener("click",(e=>{console.log(t);const s=Number(t.dataset.row),r=Number(t.dataset.column);a.getPlayers()[0].sendAttack([s,r])})),e.appendChild(t)}},t=e=>{const t=document.querySelector(".opponent-board"),a=Array.from(t.querySelectorAll(".gameboard-cell"));"enable"===e?a.forEach((e=>{e.disabled=!1})):"disable"===e&&a.forEach((e=>{e.disabled=!0}))},s=()=>{event.preventDefault()},r=e=>{e.preventDefault();const t=e.target;if(Array.from(t.classList).includes("contains-ship-image"))return;const s=e.dataTransfer.getData("image"),o=JSON.parse(s);if(!((e,t)=>{const s=[Number(e.dataset.row),Number(e.dataset.column)],r=Number(t.shipLength);return t.horizontal?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):t.vertical?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(t,o))return;const i=((e,t)=>{const a=t.shipLength,s=Number(e.dataset.row),r=Number(e.dataset.column),o=[[s,r]];e.classList.add("contains-ship-image"),e.classList.add("ship-image"),e.classList.add(`ship-image-${a}`),e.classList.add(`ship-image-${a}-1`),t.horizontal?e.classList.add("horizontal"):t.vertical&&e.classList.add("vertical");for(let e=1;e<a;e++){let i;t.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+e}']`),i.classList.add("horizontal"),o.push([s,r+e])):t.vertical&&(i=document.querySelector(`.player-board [data-row='${s+e}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+e,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${e+1}`)}return o})(t,o);a.getPlayers()[0].addShipToGameboard(Number(o.shipLength),i),(e=>{const t=e.elementID,a=document.querySelector(`#${t}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),t.removeEventListener("drop",r)};return{initializeBoardDOM:()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");e(t),e(a)},insertDraggedImage:r,rotateShipImage:e=>{const t=Array.from(e.classList);t.includes("horizontal")?(e.classList.remove("horizontal"),e.classList.add("vertical")):t.includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))},rotateDraggedImage:e=>{const t=e.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((e,t)=>{const a=Array.from(t.classList);a.includes("horizontal")?e.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(e.classList.add("temp-rotate-vertical"),"5"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-5"):"4"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-4"):"3"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-3"):"2"===t.dataset.shipLength&&e.classList.add("temp-rotate-vertical-2"))})(a,t),a.appendChild(t),document.body.appendChild(a),e.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:e=>{const t={image:e.target.src,shipLength:e.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:e.target.getAttribute("id")};Array.from(e.target.classList).includes("horizontal")?t.horizontal=!0:Array.from(e.target.classList).includes("vertical")&&(t.vertical=!0),console.log(t);const a=JSON.stringify(t);e.dataTransfer.setData("image",a)},dragOver:s,addAttackResultDOM:(e,t,a)=>{const s=a[0],r=a[1];console.log(e);const o=document.querySelector(`.${e}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`),i=document.createElement("img");i.classList.add("attack-results"),o.appendChild(i),"hit"===t?i.setAttribute("src","../dist/red_X.png"):i.setAttribute("src","../dist/white_O.png"),o.disabled=!0},toggleAbilityToAttack:t}})(),t=t=>{const s="human"!==t&&("computer"===t||void 0),r=(()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){e.push([]);for(let a=0;a<10;a++)e[t].push(void 0)}return e})(),t=[],a=[],s=[],r=[],o=[];let i=!1;const d=t=>e[t[0]][t[1]];return{getCoordinates:d,getPlacedShips:()=>t,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const t of s)e[t[0]][t[1]]=a;t.push(a)},receiveAttack:e=>{const r=d(e);return void 0!==r?(r.hit(),t.every((e=>e.isSunk()))&&(i=!0),s.push(e),"hit"):(a.push(e),"miss")},addSentMissedShot:e=>{r.push(e)},addSentHitShot:e=>{o.push(e)}}})();let o;const i=()=>s,d=(e,t)=>{const a=(e=>{const t=e;let a=0,s=!1;return{getShipLength:()=>t,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===t&&(s=!0)}}})(e);r.placeShip(a,t)},n=t=>{if(p(t))return;const s=o.getGameboard(),d=o.receiveAttack(t);if("hit"===d){if(r.addSentHitShot(t),i()?i()&&e.addAttackResultDOM("player",d,t):e.addAttackResultDOM("opponent",d,t),s.isAllShipsSunk())return void a.endGame(o)}else"miss"===d&&(r.addSentMissedShot(t),i()?i()&&e.addAttackResultDOM("player",d,t):e.addAttackResultDOM("opponent",d,t));o.isComputer()&&o.sendComputerAttack()},l=e=>{let t=[];do{t=[];const a=c(),s=u(a,e);t.push(a),t=t.concat(s)}while(t.length<e);return t},c=()=>{const e=[void 0,void 0];do{e[0]=h(),e[1]=h()}while(void 0!==r.getCoordinates(e));return e},u=(e,t)=>{const a=[];if(m(e,t,"up")){const s=[];for(let a=1;a<t;a++)s.push([e[0]-a,e[1]]);a.push(s)}if(m(e,t,"right")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]+a]);a.push(s)}if(m(e,t,"down")){const s=[];for(let a=1;a<t;a++)s.push([e[0]+a,e[1]]);a.push(s)}if(m(e,t,"left")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},h=()=>Math.floor(10*Math.random()),p=e=>{let t=!1;const a=o.getGameboard().getReceivedMissedShots(),s=o.getGameboard().getReceivedHitShots();return t=a.some((t=>t[0]===e[0]&&t[1]===e[1])),t||(t=s.some((t=>t[0]===e[0]&&t[1]===e[1]))),t},m=(e,t,a)=>{switch(a){case"up":if(e[0]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]-a,e[1]]))return!1;return!0;case"right":if(e[1]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]+a]))return!1;return!0;case"down":if(e[0]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]+a,e[1]]))return!1;return!0;case"left":if(e[1]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>r,getOpposingPlayer:()=>o,setOpposingPlayer:e=>{o=e},addShipToGameboard:d,sendAttack:n,initializeComputerGameboard:()=>{if(!s)return;const e=[5,4,3,3,2];for(const t of e){const e=l(t);d(t,e)}},sendComputerAttack:()=>{if(!s)return;const e=(()=>{const e=[void 0,void 0];do{e[0]=h(),e[1]=h()}while(p(e));return e})();n(e)},receiveAttack:e=>r.receiveAttack(e),checkIfValidEmptyCoordinates:m}},a=(()=>{const a=[];let s,r=!0;return{getPlayers:()=>a,isInProgress:()=>r,getWinner:()=>s,createGame:()=>{const e=t("human");a.push(e);const s=t("computer");a.push(s),e.setOpposingPlayer(s),s.setOpposingPlayer(e),s.initializeComputerGameboard()},endGame:t=>{r=!1,(e=>{const t=e.getOpposingPlayer();s=t})(t),e.toggleAbilityToAttack("disable")},resetGame:()=>{a.length=0,r=!0,s=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((t=>{const a=t.children[0];t.children[2].addEventListener("click",(()=>{e.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((t=>{t.addEventListener("dragstart",(t=>{e.getDraggedImage(t),e.rotateDraggedImage(t)}))}))};a.createGame(),e.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVUsRUFhOUN3SixVQVhnQixLQUNoQlYsRUFBUS9JLE9BQVMsRUFDakJpSixHQUFhLEVBQ2JELE9BQVNqRSxDQUFTLEVBVXJCLEVBdENnQixHQ0hYMkUsRUFDNkIsS0FDRGpMLFNBQVN1QyxpQkFBaUIsbUJBQ2xDQyxTQUFTMEksSUFDN0IsTUFBTUMsRUFBTUQsRUFBTUUsU0FBUyxHQUNmRixFQUFNRSxTQUFTLEdBQ3ZCckssaUJBQWlCLFNBQVMsS0FDNUJ2QixFQUFja0YsZ0JBQWdCeUcsRUFBSSxHQUNsQyxHQUNGLEVBVEFGLEVBV3lCLEtBQ1J2SyxNQUFNQyxLQUFLWCxTQUFTdUMsaUJBQWlCLGdCQUM3Q0MsU0FBUzZFLElBQ2xCQSxFQUFLdEcsaUJBQWlCLGFBQWNDLElBQ2xDeEIsRUFBY2dHLGdCQUFnQnhFLEdBQzlCeEIsRUFBY3NGLG1CQUFtQjlELEVBQU0sR0FDdkMsR0FDRixFQ2hCTkcsRUFBU3dKLGFBRVRuTCxFQUFjK0UscUJBRWQwRyxJQUVBQSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL0RPTV9jb250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWxvb3AuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2V2ZW50X2xpc3RlbmVyX2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNoaXAgPSAoZ2l2ZW5MZW5ndGgpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gZ2l2ZW5MZW5ndGg7XG4gIGxldCBoaXRzID0gMDtcbiAgbGV0IHN1bmsgPSBmYWxzZTtcbiAgY29uc3QgZ2V0U2hpcExlbmd0aCA9ICgpID0+IGxlbmd0aDtcbiAgY29uc3QgZ2V0U2hpcEhpdHMgPSAoKSA9PiBoaXRzO1xuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBzdW5rO1xuICBjb25zdCBjaGVja0lmU3VuayA9ICgpID0+IHtcbiAgICBpZiAoaGl0cyA9PT0gbGVuZ3RoKSB7XG4gICAgICBzdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBpZiAoIXN1bmspIHtcbiAgICAgIGhpdHMgKz0gMTtcbiAgICAgIGNoZWNrSWZTdW5rKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlRoYXQgc2hpcCBoYXMgYWxyZWFkeSBiZWVuIHN1bmshXCI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFNoaXBMZW5ndGgsXG4gICAgZ2V0U2hpcEhpdHMsXG4gICAgaXNTdW5rLFxuICAgIGhpdCxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IFNoaXAgfTtcbiIsImltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZWxvb3BcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlciA9ICgoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZUJvYXJkQ2VsbHMgPSAoZ2FtZWJvYXJkRE9NKSA9PiB7XG4gICAgY29uc3QgQk9BUkRBWEVTTEVOR1RIID0gMTA7XG4gICAgY29uc3QgY29sdW1uTGFiZWxzID0gW1wiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJJXCIsIFwiSlwiXTtcbiAgICBjb25zdCByb3dMYWJlbHMgPSBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIxMFwiXTtcbiAgICBmb3IgKGxldCBpID0gLTE7IGkgPCBCT0FSREFYRVNMRU5HVEg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IC0xOyBqIDwgQk9BUkRBWEVTTEVOR1RIOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgaWYgKGogPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBpbnZpc2libGVQbGFjZWhvbGRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lYm9hcmQtbGFiZWxcIik7XG4gICAgICAgICAgICBpbnZpc2libGVQbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBnYW1lYm9hcmRET00uYXBwZW5kQ2hpbGQoaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uTGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29sdW1uLWxhYmVsXCIpO1xuICAgICAgICAgICAgY29sdW1uTGFiZWxFbGVtZW50LnRleHRDb250ZW50ID0gY29sdW1uTGFiZWxzW2pdO1xuICAgICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGNvbHVtbkxhYmVsRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGogPT09IC0xKSB7XG4gICAgICAgICAgY29uc3Qgcm93TGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICByb3dMYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInJvdy1sYWJlbFwiKTtcbiAgICAgICAgICByb3dMYWJlbEVsZW1lbnQudGV4dENvbnRlbnQgPSByb3dMYWJlbHNbaV07XG4gICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKHJvd0xhYmVsRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uc3QgY2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIC8vIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtcm93XCIsIGkpO1xuICAgICAgICAgIC8vIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY29sdW1uXCIsIGopO1xuICAgICAgICAgIC8vIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lYm9hcmQtY2VsbFwiKTtcbiAgICAgICAgICAvLyBjZWxsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgLy8gICBkcmFnT3ZlcihldmVudCk7XG4gICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgLy8gY2VsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgLy8gICBpbnNlcnREcmFnZ2VkSW1hZ2UoZXZlbnQpO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIGlmIChBcnJheS5mcm9tKGdhbWVib2FyZERPTS5jbGFzc0xpc3QpLmluY2x1ZGVzKFwicGxheWVyLWJvYXJkXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd1wiLCBpKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY29sdW1uXCIsIGopO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImdhbWVib2FyZC1jZWxsXCIpO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICBkcmFnT3ZlcihldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICBpbnNlcnREcmFnZ2VkSW1hZ2UoZXZlbnQpO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdLmdldEdhbWVib2FyZCgpLmdldFBsYWNlZFNoaXBzKClcbiAgICAgICAgICAgICAgICAgIC5sZW5ndGggPT09IDVcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQWJpbGl0eVRvQXR0YWNrKFwiZW5hYmxlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIEFycmF5LmZyb20oZ2FtZWJvYXJkRE9NLmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJvcHBvbmVudC1ib2FyZFwiKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgY2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1yb3dcIiwgaSk7XG4gICAgICAgICAgICBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbHVtblwiLCBqKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lYm9hcmQtY2VsbFwiKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coY2VsbEVsZW1lbnQpO1xuICAgICAgICAgICAgICBjb25zdCBjZWxsUm93ID0gTnVtYmVyKGNlbGxFbGVtZW50LmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgY29uc3QgY2VsbENvbHVtbiA9IE51bWJlcihjZWxsRWxlbWVudC5kYXRhc2V0LmNvbHVtbik7XG4gICAgICAgICAgICAgIEdhbWVMb29wLmdldFBsYXllcnMoKVswXS5zZW5kQXR0YWNrKFtjZWxsUm93LCBjZWxsQ29sdW1uXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHNvbWUgY2xpY2sgZXZlbnQgbGlzdGVuZXIgd2hlcmUgYXR0YWNrIGlzIG1hZGUgT1IgcHJpb3IgdG8gdGhhdCwgcGxhY2luZyBzaGlwIG9uIHRoYXQgY2VsbFxuICAgICAgICAgIC8vIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHRvZ2dsZUFiaWxpdHlUb0F0dGFjayA9IChhY3Rpb24pID0+IHtcbiAgICBjb25zdCBjb21wdXRlckdhbWVib2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm9wcG9uZW50LWJvYXJkXCIpO1xuICAgIGNvbnN0IGNlbGxFbGVtZW50cyA9IEFycmF5LmZyb20oXG4gICAgICBjb21wdXRlckdhbWVib2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5nYW1lYm9hcmQtY2VsbFwiKVxuICAgICk7XG4gICAgaWYgKGFjdGlvbiA9PT0gXCJlbmFibGVcIikge1xuICAgICAgY2VsbEVsZW1lbnRzLmZvckVhY2goKGNlbGxFbGVtZW50KSA9PiB7XG4gICAgICAgIGNlbGxFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJkaXNhYmxlXCIpIHtcbiAgICAgIGNlbGxFbGVtZW50cy5mb3JFYWNoKChjZWxsRWxlbWVudCkgPT4ge1xuICAgICAgICBjZWxsRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldERyYWdnZWRJbWFnZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGRhdGFPYmplY3QgPSB7XG4gICAgICBpbWFnZTogZXZlbnQudGFyZ2V0LnNyYyxcbiAgICAgIHNoaXBMZW5ndGg6IGV2ZW50LnRhcmdldC5kYXRhc2V0LnNoaXBMZW5ndGgsXG4gICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgIGVsZW1lbnRJRDogZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImlkXCIpLFxuICAgIH07XG4gICAgaWYgKEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJob3Jpem9udGFsXCIpKSB7XG4gICAgICBkYXRhT2JqZWN0Lmhvcml6b250YWwgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuZnJvbShldmVudC50YXJnZXQuY2xhc3NMaXN0KS5pbmNsdWRlcyhcInZlcnRpY2FsXCIpKSB7XG4gICAgICBkYXRhT2JqZWN0LnZlcnRpY2FsID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coZGF0YU9iamVjdCk7XG4gICAgY29uc3QgZGF0YVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRhdGFPYmplY3QpO1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKFwiaW1hZ2VcIiwgZGF0YVN0cmluZyk7XG4gIH07XG4gIGNvbnN0IGRyYWdPdmVyID0gKCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG4gIGNvbnN0IGluaXRpYWxpemVCb2FyZERPTSA9ICgpID0+IHtcbiAgICBjb25zdCBodW1hblBsYXllckdhbWVib2FyZERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxheWVyLWJvYXJkXCIpO1xuICAgIGNvbnN0IG9wcG9uZW50R2FtZWJvYXJkRE9NID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vcHBvbmVudC1ib2FyZFwiKTtcbiAgICBjcmVhdGVCb2FyZENlbGxzKGh1bWFuUGxheWVyR2FtZWJvYXJkRE9NKTtcbiAgICBjcmVhdGVCb2FyZENlbGxzKG9wcG9uZW50R2FtZWJvYXJkRE9NKTtcbiAgfTtcbiAgY29uc3QgaXNWYWxpZEdhbWVib2FyZENlbGwgPSAodGFyZ2V0Q2VsbCwgZGF0YU9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGNlbGxDb29yZGluYXRlcyA9IFtcbiAgICAgIE51bWJlcih0YXJnZXRDZWxsLmRhdGFzZXQucm93KSxcbiAgICAgIE51bWJlcih0YXJnZXRDZWxsLmRhdGFzZXQuY29sdW1uKSxcbiAgICBdO1xuICAgIGNvbnN0IGxlbmd0aCA9IE51bWJlcihkYXRhT2JqZWN0LnNoaXBMZW5ndGgpO1xuICAgIGlmIChkYXRhT2JqZWN0Lmhvcml6b250YWwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdLmNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoXG4gICAgICAgICAgY2VsbENvb3JkaW5hdGVzLFxuICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICBcInJpZ2h0XCJcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZml0c1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIm5vcGVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkYXRhT2JqZWN0LnZlcnRpY2FsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIEdhbWVMb29wLmdldFBsYXllcnMoKVswXS5jaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKFxuICAgICAgICAgIGNlbGxDb29yZGluYXRlcyxcbiAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgXCJkb3duXCJcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZml0c1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIm5vcGVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjb25zdCBhZGRTaGlwVG9ET00gPSAodGFyZ2V0Q2VsbCwgZGF0YU9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFPYmplY3Quc2hpcExlbmd0aDtcbiAgICBjb25zdCB0YXJnZXRDZWxsUm93ID0gTnVtYmVyKHRhcmdldENlbGwuZGF0YXNldC5yb3cpO1xuICAgIGNvbnN0IHRhcmdldENlbGxDb2x1bW4gPSBOdW1iZXIodGFyZ2V0Q2VsbC5kYXRhc2V0LmNvbHVtbik7XG4gICAgY29uc3QgY29vcmRpbmF0ZXNBcnJheSA9IFtbdGFyZ2V0Q2VsbFJvdywgdGFyZ2V0Q2VsbENvbHVtbl1dO1xuICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcImNvbnRhaW5zLXNoaXAtaW1hZ2VcIik7XG4gICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcC1pbWFnZVwiKTtcbiAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoYHNoaXAtaW1hZ2UtJHtsZW5ndGh9YCk7XG4gICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKGBzaGlwLWltYWdlLSR7bGVuZ3RofS0xYCk7XG4gICAgaWYgKGRhdGFPYmplY3QuaG9yaXpvbnRhbCkge1xuICAgICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFPYmplY3QudmVydGljYWwpIHtcbiAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcInZlcnRpY2FsXCIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcmVtYWluaW5nQ2VsbDtcbiAgICAgIGlmIChkYXRhT2JqZWN0Lmhvcml6b250YWwpIHtcbiAgICAgICAgcmVtYWluaW5nQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgYC5wbGF5ZXItYm9hcmQgW2RhdGEtcm93PScke3RhcmdldENlbGxSb3d9J11bZGF0YS1jb2x1bW49JyR7XG4gICAgICAgICAgICB0YXJnZXRDZWxsQ29sdW1uICsgaVxuICAgICAgICAgIH0nXWBcbiAgICAgICAgKTtcbiAgICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICAgICAgY29vcmRpbmF0ZXNBcnJheS5wdXNoKFt0YXJnZXRDZWxsUm93LCB0YXJnZXRDZWxsQ29sdW1uICsgaV0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhT2JqZWN0LnZlcnRpY2FsKSB7XG4gICAgICAgIHJlbWFpbmluZ0NlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGAucGxheWVyLWJvYXJkIFtkYXRhLXJvdz0nJHtcbiAgICAgICAgICAgIHRhcmdldENlbGxSb3cgKyBpXG4gICAgICAgICAgfSddW2RhdGEtY29sdW1uPScke3RhcmdldENlbGxDb2x1bW59J11gXG4gICAgICAgICk7XG4gICAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChcInZlcnRpY2FsXCIpO1xuICAgICAgICBjb29yZGluYXRlc0FycmF5LnB1c2goW3RhcmdldENlbGxSb3cgKyBpLCB0YXJnZXRDZWxsQ29sdW1uXSk7XG4gICAgICB9XG4gICAgICByZW1haW5pbmdDZWxsLmNsYXNzTGlzdC5hZGQoXCJjb250YWlucy1zaGlwLWltYWdlXCIpO1xuICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcC1pbWFnZVwiKTtcbiAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChgc2hpcC1pbWFnZS0ke2xlbmd0aH1gKTtcbiAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChgc2hpcC1pbWFnZS0ke2xlbmd0aH0tJHtpICsgMX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzQXJyYXk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGVJbWFnZUJ1dHRvbkludGVyYWN0aW9ucyA9IChkYXRhT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgSUQgPSBkYXRhT2JqZWN0LmVsZW1lbnRJRDtcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtJRH1gKTtcbiAgICBjb25zdCBidXR0b25FbGVtZW50ID0gaW1hZ2VFbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcbiAgICBpbWFnZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIsIGZhbHNlKTtcbiAgICBpbWFnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkLWltYWdlXCIpO1xuICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICB9O1xuICBjb25zdCBpbnNlcnREcmFnZ2VkSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHRhcmdldENlbGwgPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKEFycmF5LmZyb20odGFyZ2V0Q2VsbC5jbGFzc0xpc3QpLmluY2x1ZGVzKFwiY29udGFpbnMtc2hpcC1pbWFnZVwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJpbWFnZVwiKTtcbiAgICBjb25zdCBkYXRhT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKTtcbiAgICBpZiAoIWlzVmFsaWRHYW1lYm9hcmRDZWxsKHRhcmdldENlbGwsIGRhdGFPYmplY3QpKSB7XG4gICAgICAvLyBwcm9iYWJseSBtYWtlIHNvbWUgRE9NIGVycm9yIG1lc3NhZ2UgYXBwZWFyXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNoaXBDb29yZGluYXRlcyA9IGFkZFNoaXBUb0RPTSh0YXJnZXRDZWxsLCBkYXRhT2JqZWN0KTtcbiAgICBHYW1lTG9vcC5nZXRQbGF5ZXJzKClbMF0uYWRkU2hpcFRvR2FtZWJvYXJkKFxuICAgICAgTnVtYmVyKGRhdGFPYmplY3Quc2hpcExlbmd0aCksXG4gICAgICBzaGlwQ29vcmRpbmF0ZXNcbiAgICApO1xuICAgIGRpc2FibGVJbWFnZUJ1dHRvbkludGVyYWN0aW9ucyhkYXRhT2JqZWN0KTtcbiAgICB0YXJnZXRDZWxsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIGluc2VydERyYWdnZWRJbWFnZSk7XG4gIH07XG4gIGNvbnN0IHJvdGF0ZVNoaXBJbWFnZSA9IChpbWFnZSkgPT4ge1xuICAgIGNvbnN0IGltYWdlQ2xhc3NlcyA9IEFycmF5LmZyb20oaW1hZ2UuY2xhc3NMaXN0KTtcbiAgICBpZiAoaW1hZ2VDbGFzc2VzLmluY2x1ZGVzKFwiaG9yaXpvbnRhbFwiKSkge1xuICAgICAgaW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcImhvcml6b250YWxcIik7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKFwidmVydGljYWxcIik7XG4gICAgfSBlbHNlIGlmIChpbWFnZUNsYXNzZXMuaW5jbHVkZXMoXCJ2ZXJ0aWNhbFwiKSkge1xuICAgICAgaW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcInZlcnRpY2FsXCIpO1xuICAgICAgaW1hZ2UuY2xhc3NMaXN0LmFkZChcImhvcml6b250YWxcIik7XG4gICAgfVxuICB9O1xuICBjb25zdCByb3RhdGVQZXJMZW5ndGggPSAodGVtcERpdiwgY2xvbmVkSW1hZ2VFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY2xvbmVkSW1hZ2VFbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20oY2xvbmVkSW1hZ2VFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgaWYgKGNsb25lZEltYWdlRWxlbWVudENsYXNzZXMuaW5jbHVkZXMoXCJob3Jpem9udGFsXCIpKSB7XG4gICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS1ob3Jpem9udGFsXCIpO1xuICAgIH0gZWxzZSBpZiAoY2xvbmVkSW1hZ2VFbGVtZW50Q2xhc3Nlcy5pbmNsdWRlcyhcInZlcnRpY2FsXCIpKSB7XG4gICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS12ZXJ0aWNhbFwiKTtcbiAgICAgIGlmIChjbG9uZWRJbWFnZUVsZW1lbnQuZGF0YXNldC5zaGlwTGVuZ3RoID09PSBcIjVcIikge1xuICAgICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS12ZXJ0aWNhbC01XCIpO1xuICAgICAgfSBlbHNlIGlmIChjbG9uZWRJbWFnZUVsZW1lbnQuZGF0YXNldC5zaGlwTGVuZ3RoID09PSBcIjRcIikge1xuICAgICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS12ZXJ0aWNhbC00XCIpO1xuICAgICAgfSBlbHNlIGlmIChjbG9uZWRJbWFnZUVsZW1lbnQuZGF0YXNldC5zaGlwTGVuZ3RoID09PSBcIjNcIikge1xuICAgICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS12ZXJ0aWNhbC0zXCIpO1xuICAgICAgfSBlbHNlIGlmIChjbG9uZWRJbWFnZUVsZW1lbnQuZGF0YXNldC5zaGlwTGVuZ3RoID09PSBcIjJcIikge1xuICAgICAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZS12ZXJ0aWNhbC0yXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgcm90YXRlRHJhZ2dlZEltYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgaW1hZ2VFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IGNsb25lZEltYWdlRWxlbWVudCA9IGltYWdlRWxlbWVudC5jbG9uZU5vZGUoKTtcbiAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0ZW1wRGl2LmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXJvdGF0ZVwiKTtcbiAgICByb3RhdGVQZXJMZW5ndGgodGVtcERpdiwgY2xvbmVkSW1hZ2VFbGVtZW50KTtcbiAgICB0ZW1wRGl2LmFwcGVuZENoaWxkKGNsb25lZEltYWdlRWxlbWVudCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wRGl2KTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKHRlbXBEaXYsIDAsIDApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wRGl2KTtcbiAgICB9LCAwKTtcbiAgfTtcbiAgY29uc3QgYWRkQXR0YWNrUmVzdWx0RE9NID0gKHBsYXllclR5cGUsIGF0dGFja1Jlc3VsdHMsIGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgY29uc3QgY2VsbFJvdyA9IGNvb3JkaW5hdGVzWzBdO1xuICAgIGNvbnN0IGNlbGxDb2x1bW4gPSBjb29yZGluYXRlc1sxXTtcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJUeXBlKTtcbiAgICBjb25zdCBnYW1lYm9hcmRET00gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtwbGF5ZXJUeXBlfS1ib2FyZGApO1xuICAgIGNvbnN0IHRhcmdldENlbGwgPSBnYW1lYm9hcmRET00ucXVlcnlTZWxlY3RvcihcbiAgICAgIGBbZGF0YS1yb3c9JyR7Y2VsbFJvd30nXVtkYXRhLWNvbHVtbj0nJHtjZWxsQ29sdW1ufSddYFxuICAgICk7XG4gICAgY29uc3QgYXR0YWNrUmVzdWx0c0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIGF0dGFja1Jlc3VsdHNFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhdHRhY2stcmVzdWx0c1wiKTtcbiAgICB0YXJnZXRDZWxsLmFwcGVuZENoaWxkKGF0dGFja1Jlc3VsdHNFbGVtZW50KTtcbiAgICBpZiAoYXR0YWNrUmVzdWx0cyA9PT0gXCJoaXRcIikge1xuICAgICAgYXR0YWNrUmVzdWx0c0VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vZGlzdC9yZWRfWC5wbmdcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF0dGFja1Jlc3VsdHNFbGVtZW50LnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4uL2Rpc3Qvd2hpdGVfTy5wbmdcIik7XG4gICAgfVxuICAgIHRhcmdldENlbGwuZGlzYWJsZWQgPSB0cnVlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGluaXRpYWxpemVCb2FyZERPTSxcbiAgICBpbnNlcnREcmFnZ2VkSW1hZ2UsXG4gICAgcm90YXRlU2hpcEltYWdlLFxuICAgIHJvdGF0ZURyYWdnZWRJbWFnZSxcbiAgICBnZXREcmFnZ2VkSW1hZ2UsXG4gICAgZHJhZ092ZXIsXG4gICAgYWRkQXR0YWNrUmVzdWx0RE9NLFxuICAgIHRvZ2dsZUFiaWxpdHlUb0F0dGFjayxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXIgfTtcbiIsImltcG9ydCB7IFNoaXAgfSBmcm9tIFwiLi9zaGlwXCI7XG5pbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZWxvb3BcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuXG5jb25zdCBQbGF5ZXIgPSAocGxheWVyVHlwZSkgPT4ge1xuICBjb25zdCBkZXRlcm1pbmVQbGF5ZXJUeXBlID0gKCkgPT4ge1xuICAgIGlmIChwbGF5ZXJUeXBlID09PSBcImh1bWFuXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBsYXllclR5cGUgPT09IFwiY29tcHV0ZXJcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBjb21wdXRlclBsYXllciA9IGRldGVybWluZVBsYXllclR5cGUoKTtcbiAgY29uc3QgcGxheWVyR2FtZWJvYXJkID0gR2FtZWJvYXJkKCk7XG4gIGxldCBvcHBvc2luZ1BsYXllcjtcbiAgY29uc3QgaXNDb21wdXRlciA9ICgpID0+IGNvbXB1dGVyUGxheWVyO1xuICBjb25zdCBnZXRHYW1lYm9hcmQgPSAoKSA9PiBwbGF5ZXJHYW1lYm9hcmQ7XG4gIGNvbnN0IGdldE9wcG9zaW5nUGxheWVyID0gKCkgPT4gb3Bwb3NpbmdQbGF5ZXI7XG4gIGNvbnN0IHNldE9wcG9zaW5nUGxheWVyID0gKHBsYXllcikgPT4ge1xuICAgIG9wcG9zaW5nUGxheWVyID0gcGxheWVyO1xuICB9O1xuICBjb25zdCBhZGRTaGlwVG9HYW1lYm9hcmQgPSAoc2hpcExlbmd0aCwgY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBzaGlwID0gU2hpcChzaGlwTGVuZ3RoKTtcbiAgICBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAsIGNvb3JkaW5hdGVzKTtcbiAgfTtcbiAgY29uc3Qgc2VuZEF0dGFjayA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGlmIChjaGVja0lmUHJldmlvdXNseUF0dGFja2VkKGNvb3JkaW5hdGVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvcHBvc2luZ1BsYXllckdhbWVib2FyZCA9IG9wcG9zaW5nUGxheWVyLmdldEdhbWVib2FyZCgpO1xuICAgIGNvbnN0IGF0dGFja1Jlc3VsdHMgPSBvcHBvc2luZ1BsYXllci5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKTtcbiAgICBpZiAoYXR0YWNrUmVzdWx0cyA9PT0gXCJoaXRcIikge1xuICAgICAgcGxheWVyR2FtZWJvYXJkLmFkZFNlbnRIaXRTaG90KGNvb3JkaW5hdGVzKTtcbiAgICAgIGlmICghaXNDb21wdXRlcigpKSB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuYWRkQXR0YWNrUmVzdWx0RE9NKFxuICAgICAgICAgIFwib3Bwb25lbnRcIixcbiAgICAgICAgICBhdHRhY2tSZXN1bHRzLFxuICAgICAgICAgIGNvb3JkaW5hdGVzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzQ29tcHV0ZXIoKSkge1xuICAgICAgICBET01Db250cm9sbGVyLmFkZEF0dGFja1Jlc3VsdERPTShcInBsYXllclwiLCBhdHRhY2tSZXN1bHRzLCBjb29yZGluYXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAob3Bwb3NpbmdQbGF5ZXJHYW1lYm9hcmQuaXNBbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICBHYW1lTG9vcC5lbmRHYW1lKG9wcG9zaW5nUGxheWVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXR0YWNrUmVzdWx0cyA9PT0gXCJtaXNzXCIpIHtcbiAgICAgIHBsYXllckdhbWVib2FyZC5hZGRTZW50TWlzc2VkU2hvdChjb29yZGluYXRlcyk7XG4gICAgICBpZiAoIWlzQ29tcHV0ZXIoKSkge1xuICAgICAgICBET01Db250cm9sbGVyLmFkZEF0dGFja1Jlc3VsdERPTShcbiAgICAgICAgICBcIm9wcG9uZW50XCIsXG4gICAgICAgICAgYXR0YWNrUmVzdWx0cyxcbiAgICAgICAgICBjb29yZGluYXRlc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpc0NvbXB1dGVyKCkpIHtcbiAgICAgICAgRE9NQ29udHJvbGxlci5hZGRBdHRhY2tSZXN1bHRET00oXCJwbGF5ZXJcIiwgYXR0YWNrUmVzdWx0cywgY29vcmRpbmF0ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3Bwb3NpbmdQbGF5ZXIuaXNDb21wdXRlcigpKSB7XG4gICAgICBvcHBvc2luZ1BsYXllci5zZW5kQ29tcHV0ZXJBdHRhY2soKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCA9ICgpID0+IHtcbiAgICBpZiAoIWNvbXB1dGVyUGxheWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aHNPZlNoaXBzID0gWzUsIDQsIDMsIDMsIDJdO1xuICAgIGZvciAoY29uc3Qgc2hpcExlbmd0aCBvZiBsZW5ndGhzT2ZTaGlwcykge1xuICAgICAgY29uc3Qgc2hpcENvb3JkaW5hdGVzID0gZ2VuZXJhdGVDb21wdXRlclNoaXBDb29yZGluYXRlcyhzaGlwTGVuZ3RoKTtcbiAgICAgIGFkZFNoaXBUb0dhbWVib2FyZChzaGlwTGVuZ3RoLCBzaGlwQ29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2VuZENvbXB1dGVyQXR0YWNrID0gKCkgPT4ge1xuICAgIGlmICghY29tcHV0ZXJQbGF5ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYXR0YWNrQ29vcmRpbmF0ZXMgPSBnZW5lcmF0ZUF0dGFja0Nvb3JkaW5hdGVzKCk7XG4gICAgc2VuZEF0dGFjayhhdHRhY2tDb29yZGluYXRlcyk7XG4gIH07XG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBhdHRhY2tSZXN1bHRzID0gcGxheWVyR2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpO1xuICAgIHJldHVybiBhdHRhY2tSZXN1bHRzO1xuICB9O1xuICBjb25zdCBnZW5lcmF0ZUNvbXB1dGVyU2hpcENvb3JkaW5hdGVzID0gKHNoaXBMZW5ndGgpID0+IHtcbiAgICBsZXQgbGlzdE9mQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICBkbyB7XG4gICAgICBsaXN0T2ZDb29yZGluYXRlcyA9IFtdO1xuICAgICAgY29uc3Qgc3RhcnRpbmdDb29yZGluYXRlcyA9IGdlbmVyYXRlU3RhcnRpbmdDb29yZGluYXRlcygpO1xuICAgICAgY29uc3Qgbm9uU3RhcnRpbmdDb29yZGluYXRlcyA9IGdlbmVyYXRlTm9uU3RhcnRpbmdDb29yZGluYXRlcyhcbiAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlcyxcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICAgKTtcbiAgICAgIGxpc3RPZkNvb3JkaW5hdGVzLnB1c2goc3RhcnRpbmdDb29yZGluYXRlcyk7XG4gICAgICBsaXN0T2ZDb29yZGluYXRlcyA9IGxpc3RPZkNvb3JkaW5hdGVzLmNvbmNhdChub25TdGFydGluZ0Nvb3JkaW5hdGVzKTtcbiAgICB9IHdoaWxlIChsaXN0T2ZDb29yZGluYXRlcy5sZW5ndGggPCBzaGlwTGVuZ3RoKTtcbiAgICByZXR1cm4gbGlzdE9mQ29vcmRpbmF0ZXM7XG4gIH07XG4gIGNvbnN0IGdlbmVyYXRlU3RhcnRpbmdDb29yZGluYXRlcyA9ICgpID0+IHtcbiAgICBjb25zdCBzdGFydGluZ0Nvb3JkaW5hdGVzID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgICBkbyB7XG4gICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdID0gZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlKCk7XG4gICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdID0gZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlKCk7XG4gICAgfSB3aGlsZSAocGxheWVyR2FtZWJvYXJkLmdldENvb3JkaW5hdGVzKHN0YXJ0aW5nQ29vcmRpbmF0ZXMpICE9PSB1bmRlZmluZWQpO1xuICAgIHJldHVybiBzdGFydGluZ0Nvb3JkaW5hdGVzO1xuICB9O1xuICBjb25zdCBnZW5lcmF0ZU5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMgPSAoc3RhcnRpbmdDb29yZGluYXRlcywgc2hpcExlbmd0aCkgPT4ge1xuICAgIGNvbnN0IHBvc3NpYmxlQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICBpZiAoY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyhzdGFydGluZ0Nvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoLCBcInVwXCIpKSB7XG4gICAgICBjb25zdCB1cENvb3JkaW5hdGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICB1cENvb3JkaW5hdGVzLnB1c2goW1xuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gLSBpLFxuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0sXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcG9zc2libGVDb29yZGluYXRlcy5wdXNoKHVwQ29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKHN0YXJ0aW5nQ29vcmRpbmF0ZXMsIHNoaXBMZW5ndGgsIFwicmlnaHRcIilcbiAgICApIHtcbiAgICAgIGNvbnN0IHJpZ2h0Q29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJpZ2h0Q29vcmRpbmF0ZXMucHVzaChbXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSxcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdICsgaSxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICBwb3NzaWJsZUNvb3JkaW5hdGVzLnB1c2gocmlnaHRDb29yZGluYXRlcyk7XG4gICAgfVxuICAgIGlmIChjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKHN0YXJ0aW5nQ29vcmRpbmF0ZXMsIHNoaXBMZW5ndGgsIFwiZG93blwiKSkge1xuICAgICAgY29uc3QgZG93bkNvb3JkaW5hdGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICBkb3duQ29vcmRpbmF0ZXMucHVzaChbXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSArIGksXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICBwb3NzaWJsZUNvb3JkaW5hdGVzLnB1c2goZG93bkNvb3JkaW5hdGVzKTtcbiAgICB9XG4gICAgaWYgKGNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoc3RhcnRpbmdDb29yZGluYXRlcywgc2hpcExlbmd0aCwgXCJsZWZ0XCIpKSB7XG4gICAgICBjb25zdCBsZWZ0Q29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlZnRDb29yZGluYXRlcy5wdXNoKFtcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gLSBpLFxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIHBvc3NpYmxlQ29vcmRpbmF0ZXMucHVzaChsZWZ0Q29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgICBpZiAocG9zc2libGVDb29yZGluYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBwb3NzaWJsZUNvb3JkaW5hdGVzO1xuICAgIH1cbiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlQ29vcmRpbmF0ZXMubGVuZ3RoKTtcbiAgICByZXR1cm4gcG9zc2libGVDb29yZGluYXRlc1tyYW5kb21JbmRleF07XG4gIH07XG4gIGNvbnN0IGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBCT0FSREFYRVNMRU5HVEggPSAxMDtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogQk9BUkRBWEVTTEVOR1RIKTtcbiAgfTtcbiAgY29uc3QgY2hlY2tJZlByZXZpb3VzbHlBdHRhY2tlZCA9IChhdHRhY2tDb29yZGluYXRlcykgPT4ge1xuICAgIGxldCBwcmV2aW91c2x5QXR0YWNrZWQgPSBmYWxzZTtcbiAgICBjb25zdCByZWNlaXZlZE1pc3NlZFNob3RzID0gb3Bwb3NpbmdQbGF5ZXJcbiAgICAgIC5nZXRHYW1lYm9hcmQoKVxuICAgICAgLmdldFJlY2VpdmVkTWlzc2VkU2hvdHMoKTtcbiAgICBjb25zdCByZWNlaXZlZEhpdFNob3RzID0gb3Bwb3NpbmdQbGF5ZXJcbiAgICAgIC5nZXRHYW1lYm9hcmQoKVxuICAgICAgLmdldFJlY2VpdmVkSGl0U2hvdHMoKTtcbiAgICBwcmV2aW91c2x5QXR0YWNrZWQgPSByZWNlaXZlZE1pc3NlZFNob3RzLnNvbWUoXG4gICAgICAoc2hvdCkgPT5cbiAgICAgICAgc2hvdFswXSA9PT0gYXR0YWNrQ29vcmRpbmF0ZXNbMF0gJiYgc2hvdFsxXSA9PT0gYXR0YWNrQ29vcmRpbmF0ZXNbMV1cbiAgICApO1xuICAgIGlmICghcHJldmlvdXNseUF0dGFja2VkKSB7XG4gICAgICBwcmV2aW91c2x5QXR0YWNrZWQgPSByZWNlaXZlZEhpdFNob3RzLnNvbWUoXG4gICAgICAgIChzaG90KSA9PlxuICAgICAgICAgIHNob3RbMF0gPT09IGF0dGFja0Nvb3JkaW5hdGVzWzBdICYmIHNob3RbMV0gPT09IGF0dGFja0Nvb3JkaW5hdGVzWzFdXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcHJldmlvdXNseUF0dGFja2VkO1xuICB9O1xuICBjb25zdCBnZW5lcmF0ZUF0dGFja0Nvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IGF0dGFja0Nvb3JkaW5hdGVzID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgICBkbyB7XG4gICAgICBhdHRhY2tDb29yZGluYXRlc1swXSA9IGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSgpO1xuICAgICAgYXR0YWNrQ29vcmRpbmF0ZXNbMV0gPSBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUoKTtcbiAgICB9IHdoaWxlIChjaGVja0lmUHJldmlvdXNseUF0dGFja2VkKGF0dGFja0Nvb3JkaW5hdGVzKSk7XG4gICAgcmV0dXJuIGF0dGFja0Nvb3JkaW5hdGVzO1xuICB9O1xuICBjb25zdCBjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzID0gKFxuICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXMsXG4gICAgc2hpcExlbmd0aCxcbiAgICBkaXJlY3Rpb25cbiAgKSA9PiB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJ1cFwiOlxuICAgICAgICBpZiAoc3RhcnRpbmdDb29yZGluYXRlc1swXSAtIChzaGlwTGVuZ3RoIC0gMSkgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcGxheWVyR2FtZWJvYXJkLmdldENvb3JkaW5hdGVzKFtcbiAgICAgICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSAtIGksXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0sXG4gICAgICAgICAgICBdKSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gKyAoc2hpcExlbmd0aCAtIDEpID4gOSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gKyBpLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSBcImRvd25cIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gKyAoc2hpcExlbmd0aCAtIDEpID4gOSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gKyBpLFxuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gLSAoc2hpcExlbmd0aCAtIDEpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gLSBpLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGlzQ29tcHV0ZXIsXG4gICAgZ2V0R2FtZWJvYXJkLFxuICAgIGdldE9wcG9zaW5nUGxheWVyLFxuICAgIHNldE9wcG9zaW5nUGxheWVyLFxuICAgIGFkZFNoaXBUb0dhbWVib2FyZCxcbiAgICBzZW5kQXR0YWNrLFxuICAgIGluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCxcbiAgICBzZW5kQ29tcHV0ZXJBdHRhY2ssXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzLFxuICB9O1xufTtcblxuZXhwb3J0IHsgUGxheWVyIH07XG4iLCJjb25zdCBHYW1lYm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZUJvYXJkID0gKCkgPT4ge1xuICAgIGNvbnN0IGJvYXJkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBib2FyZC5wdXNoKFtdKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBib2FyZFtpXS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBib2FyZDtcbiAgfTtcbiAgY29uc3QgYm9hcmQgPSBjcmVhdGVCb2FyZCgpO1xuICBjb25zdCBwbGFjZWRTaGlwcyA9IFtdO1xuICBjb25zdCByZWNlaXZlZE1pc3NlZFNob3RzID0gW107XG4gIGNvbnN0IHJlY2VpdmVkSGl0U2hvdHMgPSBbXTtcbiAgY29uc3Qgc2VudE1pc3NlZFNob3RzID0gW107XG4gIGNvbnN0IHNlbnRIaXRTaG90cyA9IFtdO1xuICBsZXQgYWxsU2hpcHNTdW5rID0gZmFsc2U7XG4gIGNvbnN0IGdldENvb3JkaW5hdGVzID0gKGNvb3JkaW5hdGVzKSA9PiBib2FyZFtjb29yZGluYXRlc1swXV1bY29vcmRpbmF0ZXNbMV1dO1xuICBjb25zdCBnZXRQbGFjZWRTaGlwcyA9ICgpID0+IHBsYWNlZFNoaXBzO1xuICBjb25zdCBnZXRSZWNlaXZlZE1pc3NlZFNob3RzID0gKCkgPT4gcmVjZWl2ZWRNaXNzZWRTaG90cztcbiAgY29uc3QgZ2V0UmVjZWl2ZWRIaXRTaG90cyA9ICgpID0+IHJlY2VpdmVkSGl0U2hvdHM7XG4gIGNvbnN0IGdldFNlbnRNaXNzZWRTaG90cyA9ICgpID0+IHNlbnRNaXNzZWRTaG90cztcbiAgY29uc3QgZ2V0U2VudEhpdFNob3RzID0gKCkgPT4gc2VudEhpdFNob3RzO1xuICBjb25zdCBpc0FsbFNoaXBzU3VuayA9ICgpID0+IGFsbFNoaXBzU3VuaztcbiAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXAsIGNvb3JkaW5hdGVzTGlzdCkgPT4ge1xuICAgIGZvciAoY29uc3QgY29vcmRpbmF0ZXMgb2YgY29vcmRpbmF0ZXNMaXN0KSB7XG4gICAgICBib2FyZFtjb29yZGluYXRlc1swXV1bY29vcmRpbmF0ZXNbMV1dID0gc2hpcDtcbiAgICB9XG4gICAgcGxhY2VkU2hpcHMucHVzaChzaGlwKTtcbiAgfTtcbiAgY29uc3QgY2hlY2tBbGxTaGlwc1N1bmsgPSAoKSA9PiB7XG4gICAgaWYgKHBsYWNlZFNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKSkge1xuICAgICAgYWxsU2hpcHNTdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBlbnRpdHlBdENvb3JkaW5hdGVzID0gZ2V0Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpO1xuICAgIGlmIChlbnRpdHlBdENvb3JkaW5hdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVudGl0eUF0Q29vcmRpbmF0ZXMuaGl0KCk7XG4gICAgICBjaGVja0FsbFNoaXBzU3VuaygpO1xuICAgICAgcmVjZWl2ZWRIaXRTaG90cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICAgIHJldHVybiBcImhpdFwiO1xuICAgIH1cbiAgICByZWNlaXZlZE1pc3NlZFNob3RzLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgIHJldHVybiBcIm1pc3NcIjtcbiAgfTtcbiAgY29uc3QgYWRkU2VudE1pc3NlZFNob3QgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBzZW50TWlzc2VkU2hvdHMucHVzaChjb29yZGluYXRlcyk7XG4gIH07XG4gIGNvbnN0IGFkZFNlbnRIaXRTaG90ID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgc2VudEhpdFNob3RzLnB1c2goY29vcmRpbmF0ZXMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldENvb3JkaW5hdGVzLFxuICAgIGdldFBsYWNlZFNoaXBzLFxuICAgIGdldFJlY2VpdmVkTWlzc2VkU2hvdHMsXG4gICAgZ2V0UmVjZWl2ZWRIaXRTaG90cyxcbiAgICBnZXRTZW50TWlzc2VkU2hvdHMsXG4gICAgZ2V0U2VudEhpdFNob3RzLFxuICAgIGlzQWxsU2hpcHNTdW5rLFxuICAgIHBsYWNlU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIGFkZFNlbnRNaXNzZWRTaG90LFxuICAgIGFkZFNlbnRIaXRTaG90LFxuICB9O1xufTtcblxuZXhwb3J0IHsgR2FtZWJvYXJkIH07XG4iLCJpbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vc2hpcFwiO1xuaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuXG5jb25zdCBHYW1lTG9vcCA9ICgoKSA9PiB7XG4gIGNvbnN0IHBsYXllcnMgPSBbXTtcbiAgbGV0IGluUHJvZ3Jlc3MgPSB0cnVlO1xuICBsZXQgd2lubmVyO1xuICBjb25zdCBnZXRQbGF5ZXJzID0gKCkgPT4gcGxheWVycztcbiAgY29uc3QgaXNJblByb2dyZXNzID0gKCkgPT4gaW5Qcm9ncmVzcztcbiAgY29uc3QgZ2V0V2lubmVyID0gKCkgPT4gd2lubmVyO1xuICBjb25zdCBzZXRXaW5uZXIgPSAobG9zZXJQbGF5ZXIpID0+IHtcbiAgICBjb25zdCB3aW5uZXJQbGF5ZXIgPSBsb3NlclBsYXllci5nZXRPcHBvc2luZ1BsYXllcigpO1xuICAgIHdpbm5lciA9IHdpbm5lclBsYXllcjtcbiAgfTtcbiAgY29uc3QgY3JlYXRlR2FtZSA9ICgpID0+IHtcbiAgICBjb25zdCBodW1hblBsYXllciA9IFBsYXllcihcImh1bWFuXCIpO1xuICAgIHBsYXllcnMucHVzaChodW1hblBsYXllcik7XG4gICAgY29uc3QgY29tcHV0ZXJQbGF5ZXIgPSBQbGF5ZXIoXCJjb21wdXRlclwiKTtcbiAgICBwbGF5ZXJzLnB1c2goY29tcHV0ZXJQbGF5ZXIpO1xuICAgIGh1bWFuUGxheWVyLnNldE9wcG9zaW5nUGxheWVyKGNvbXB1dGVyUGxheWVyKTtcbiAgICBjb21wdXRlclBsYXllci5zZXRPcHBvc2luZ1BsYXllcihodW1hblBsYXllcik7XG4gICAgY29tcHV0ZXJQbGF5ZXIuaW5pdGlhbGl6ZUNvbXB1dGVyR2FtZWJvYXJkKCk7XG4gIH07XG4gIGNvbnN0IGVuZEdhbWUgPSAobG9zZXJQbGF5ZXIpID0+IHtcbiAgICBpblByb2dyZXNzID0gZmFsc2U7XG4gICAgc2V0V2lubmVyKGxvc2VyUGxheWVyKTtcbiAgICBET01Db250cm9sbGVyLnRvZ2dsZUFiaWxpdHlUb0F0dGFjayhcImRpc2FibGVcIik7XG4gIH07XG4gIGNvbnN0IHJlc2V0R2FtZSA9ICgpID0+IHtcbiAgICBwbGF5ZXJzLmxlbmd0aCA9IDA7XG4gICAgaW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgd2lubmVyID0gdW5kZWZpbmVkO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFBsYXllcnMsXG4gICAgaXNJblByb2dyZXNzLFxuICAgIGdldFdpbm5lcixcbiAgICBjcmVhdGVHYW1lLFxuICAgIGVuZEdhbWUsXG4gICAgcmVzZXRHYW1lLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IHsgR2FtZUxvb3AgfTtcbiIsImltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuXG5jb25zdCBFdmVudExpc3RlbmVyQ29udHJvbGxlciA9ICgoKSA9PiB7XG4gIGNvbnN0IHJvdGF0ZVNoaXBJbWFnZUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwUGxhY2VtZW50RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXAtcGxhY2VtZW50XCIpO1xuICAgIHNoaXBQbGFjZW1lbnRFbGVtZW50cy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgY29uc3QgaW1nID0gZ3JvdXAuY2hpbGRyZW5bMF07XG4gICAgICBjb25zdCBidG4gPSBncm91cC5jaGlsZHJlblsyXTtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBET01Db250cm9sbGVyLnJvdGF0ZVNoaXBJbWFnZShpbWcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFkZFNoaXBQbGFjZW1lbnREcmFnID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBJbWFnZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hpcC1waWVjZVwiKSk7XG4gICAgc2hpcEltYWdlcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBzaGlwLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuZ2V0RHJhZ2dlZEltYWdlKGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlci5yb3RhdGVEcmFnZ2VkSW1hZ2UoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgcm90YXRlU2hpcEltYWdlTGlzdGVuZXJzLFxuICAgIGFkZFNoaXBQbGFjZW1lbnREcmFnLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IHsgRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIgfTtcbiIsImltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZWxvb3BcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ldmVudF9saXN0ZW5lcl9jb250cm9sbGVyXCI7XG5cbkdhbWVMb29wLmNyZWF0ZUdhbWUoKTtcblxuRE9NQ29udHJvbGxlci5pbml0aWFsaXplQm9hcmRET00oKTtcblxuRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIucm90YXRlU2hpcEltYWdlTGlzdGVuZXJzKCk7XG5cbkV2ZW50TGlzdGVuZXJDb250cm9sbGVyLmFkZFNoaXBQbGFjZW1lbnREcmFnKCk7XG4iXSwibmFtZXMiOlsiRE9NQ29udHJvbGxlciIsImNyZWF0ZUJvYXJkQ2VsbHMiLCJnYW1lYm9hcmRET00iLCJjb2x1bW5MYWJlbHMiLCJyb3dMYWJlbHMiLCJpIiwiaiIsImludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImFwcGVuZENoaWxkIiwiY29sdW1uTGFiZWxFbGVtZW50IiwidGV4dENvbnRlbnQiLCJyb3dMYWJlbEVsZW1lbnQiLCJBcnJheSIsImZyb20iLCJpbmNsdWRlcyIsImNlbGxFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZHJhZ092ZXIiLCJpbnNlcnREcmFnZ2VkSW1hZ2UiLCJHYW1lTG9vcCIsImdldFBsYXllcnMiLCJnZXRHYW1lYm9hcmQiLCJnZXRQbGFjZWRTaGlwcyIsImxlbmd0aCIsInRvZ2dsZUFiaWxpdHlUb0F0dGFjayIsImRpc2FibGVkIiwiY29uc29sZSIsImxvZyIsImNlbGxSb3ciLCJOdW1iZXIiLCJkYXRhc2V0Iiwicm93IiwiY2VsbENvbHVtbiIsImNvbHVtbiIsInNlbmRBdHRhY2siLCJhY3Rpb24iLCJjb21wdXRlckdhbWVib2FyZEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2VsbEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldENlbGwiLCJ0YXJnZXQiLCJkYXRhU3RyaW5nIiwiZGF0YVRyYW5zZmVyIiwiZ2V0RGF0YSIsImRhdGFPYmplY3QiLCJKU09OIiwicGFyc2UiLCJjZWxsQ29vcmRpbmF0ZXMiLCJzaGlwTGVuZ3RoIiwiaG9yaXpvbnRhbCIsImNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMiLCJ2ZXJ0aWNhbCIsImlzVmFsaWRHYW1lYm9hcmRDZWxsIiwic2hpcENvb3JkaW5hdGVzIiwidGFyZ2V0Q2VsbFJvdyIsInRhcmdldENlbGxDb2x1bW4iLCJjb29yZGluYXRlc0FycmF5IiwicmVtYWluaW5nQ2VsbCIsInB1c2giLCJhZGRTaGlwVG9ET00iLCJhZGRTaGlwVG9HYW1lYm9hcmQiLCJJRCIsImVsZW1lbnRJRCIsImltYWdlRWxlbWVudCIsImJ1dHRvbkVsZW1lbnQiLCJwYXJlbnROb2RlIiwiZGlzYWJsZUltYWdlQnV0dG9uSW50ZXJhY3Rpb25zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluaXRpYWxpemVCb2FyZERPTSIsImh1bWFuUGxheWVyR2FtZWJvYXJkRE9NIiwib3Bwb25lbnRHYW1lYm9hcmRET00iLCJyb3RhdGVTaGlwSW1hZ2UiLCJpbWFnZSIsImltYWdlQ2xhc3NlcyIsInJlbW92ZSIsInJvdGF0ZURyYWdnZWRJbWFnZSIsImNsb25lZEltYWdlRWxlbWVudCIsImNsb25lTm9kZSIsInRlbXBEaXYiLCJjbG9uZWRJbWFnZUVsZW1lbnRDbGFzc2VzIiwicm90YXRlUGVyTGVuZ3RoIiwiYm9keSIsInNldERyYWdJbWFnZSIsInNldFRpbWVvdXQiLCJyZW1vdmVDaGlsZCIsImdldERyYWdnZWRJbWFnZSIsInNyYyIsImdldEF0dHJpYnV0ZSIsInN0cmluZ2lmeSIsInNldERhdGEiLCJhZGRBdHRhY2tSZXN1bHRET00iLCJwbGF5ZXJUeXBlIiwiYXR0YWNrUmVzdWx0cyIsImNvb3JkaW5hdGVzIiwiYXR0YWNrUmVzdWx0c0VsZW1lbnQiLCJQbGF5ZXIiLCJjb21wdXRlclBsYXllciIsInBsYXllckdhbWVib2FyZCIsImJvYXJkIiwidW5kZWZpbmVkIiwiY3JlYXRlQm9hcmQiLCJwbGFjZWRTaGlwcyIsInJlY2VpdmVkTWlzc2VkU2hvdHMiLCJyZWNlaXZlZEhpdFNob3RzIiwic2VudE1pc3NlZFNob3RzIiwic2VudEhpdFNob3RzIiwiYWxsU2hpcHNTdW5rIiwiZ2V0Q29vcmRpbmF0ZXMiLCJnZXRSZWNlaXZlZE1pc3NlZFNob3RzIiwiZ2V0UmVjZWl2ZWRIaXRTaG90cyIsImdldFNlbnRNaXNzZWRTaG90cyIsImdldFNlbnRIaXRTaG90cyIsImlzQWxsU2hpcHNTdW5rIiwicGxhY2VTaGlwIiwic2hpcCIsImNvb3JkaW5hdGVzTGlzdCIsInJlY2VpdmVBdHRhY2siLCJlbnRpdHlBdENvb3JkaW5hdGVzIiwiaGl0IiwiZXZlcnkiLCJpc1N1bmsiLCJhZGRTZW50TWlzc2VkU2hvdCIsImFkZFNlbnRIaXRTaG90IiwiR2FtZWJvYXJkIiwib3Bwb3NpbmdQbGF5ZXIiLCJpc0NvbXB1dGVyIiwiZ2l2ZW5MZW5ndGgiLCJoaXRzIiwic3VuayIsImdldFNoaXBMZW5ndGgiLCJnZXRTaGlwSGl0cyIsIlNoaXAiLCJjaGVja0lmUHJldmlvdXNseUF0dGFja2VkIiwib3Bwb3NpbmdQbGF5ZXJHYW1lYm9hcmQiLCJlbmRHYW1lIiwic2VuZENvbXB1dGVyQXR0YWNrIiwiZ2VuZXJhdGVDb21wdXRlclNoaXBDb29yZGluYXRlcyIsImxpc3RPZkNvb3JkaW5hdGVzIiwic3RhcnRpbmdDb29yZGluYXRlcyIsImdlbmVyYXRlU3RhcnRpbmdDb29yZGluYXRlcyIsIm5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMiLCJnZW5lcmF0ZU5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMiLCJjb25jYXQiLCJnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUiLCJwb3NzaWJsZUNvb3JkaW5hdGVzIiwidXBDb29yZGluYXRlcyIsInJpZ2h0Q29vcmRpbmF0ZXMiLCJkb3duQ29vcmRpbmF0ZXMiLCJsZWZ0Q29vcmRpbmF0ZXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhdHRhY2tDb29yZGluYXRlcyIsInByZXZpb3VzbHlBdHRhY2tlZCIsInNvbWUiLCJzaG90IiwiZGlyZWN0aW9uIiwiZ2V0T3Bwb3NpbmdQbGF5ZXIiLCJzZXRPcHBvc2luZ1BsYXllciIsInBsYXllciIsImluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCIsImxlbmd0aHNPZlNoaXBzIiwiZ2VuZXJhdGVBdHRhY2tDb29yZGluYXRlcyIsInBsYXllcnMiLCJ3aW5uZXIiLCJpblByb2dyZXNzIiwiaXNJblByb2dyZXNzIiwiZ2V0V2lubmVyIiwiY3JlYXRlR2FtZSIsImh1bWFuUGxheWVyIiwibG9zZXJQbGF5ZXIiLCJ3aW5uZXJQbGF5ZXIiLCJzZXRXaW5uZXIiLCJyZXNldEdhbWUiLCJFdmVudExpc3RlbmVyQ29udHJvbGxlciIsImdyb3VwIiwiaW1nIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9