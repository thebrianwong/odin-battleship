(()=>{"use strict";const e=(()=>{const e=e=>{const r=["A","B","C","D","E","F","G","H","I","J"],o=["1","2","3","4","5","6","7","8","9","10"];for(let i=-1;i<10;i++)for(let n=-1;n<10;n++)if(-1===i)if(-1===n){const t=document.createElement("div");t.classList.add("gameboard-label"),t.style.visibility="hidden",e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("column-label"),t.textContent=r[n],e.appendChild(t)}else if(-1===n){const t=document.createElement("div");t.classList.add("row-label"),t.textContent=o[i],e.appendChild(t)}else if(Array.from(e.classList).includes("player-board")){const a=document.createElement("div");a.setAttribute("data-row",i),a.setAttribute("data-column",n),a.classList.add("gameboard-cell"),a.addEventListener("dragover",(e=>{t(e)})),a.addEventListener("drop",(e=>{s(e)})),e.appendChild(a)}else if(Array.from(e.classList).includes("opponent-board")){const t=document.createElement("button");t.setAttribute("data-row",i),t.setAttribute("data-column",n),t.classList.add("gameboard-cell"),t.addEventListener("click",(e=>{console.log(t);const s=Number(t.dataset.row),r=Number(t.dataset.column);a.getPlayers()[0].sendAttack([s,r])})),e.appendChild(t)}},t=()=>{event.preventDefault()},s=e=>{e.preventDefault();const t=e.target;if(Array.from(t.classList).includes("contains-ship-image"))return;const r=e.dataTransfer.getData("image"),o=JSON.parse(r);if(!((e,t)=>{const s=[Number(e.dataset.row),Number(e.dataset.column)],r=Number(t.shipLength);return t.horizontal?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"right")?(console.log("fits"),!0):(console.log("nope"),!1):t.vertical?a.getPlayers()[0].checkIfValidEmptyCoordinates(s,r,"down")?(console.log("fits"),!0):(console.log("nope"),!1):void 0})(t,o))return;const i=((e,t)=>{const a=t.shipLength,s=Number(e.dataset.row),r=Number(e.dataset.column),o=[[s,r]];e.classList.add("contains-ship-image"),e.classList.add("ship-image"),e.classList.add(`ship-image-${a}`),e.classList.add(`ship-image-${a}-1`),t.horizontal?e.classList.add("horizontal"):t.vertical&&e.classList.add("vertical");for(let e=1;e<a;e++){let i;t.horizontal?(i=document.querySelector(`.player-board [data-row='${s}'][data-column='${r+e}']`),i.classList.add("horizontal"),o.push([s,r+e])):t.vertical&&(i=document.querySelector(`.player-board [data-row='${s+e}'][data-column='${r}']`),i.classList.add("vertical"),o.push([s+e,r])),i.classList.add("contains-ship-image"),i.classList.add("ship-image"),i.classList.add(`ship-image-${a}`),i.classList.add(`ship-image-${a}-${e+1}`)}return o})(t,o);a.getPlayers()[0].addShipToGameboard(Number(o.shipLength),i),(e=>{const t=e.elementID,a=document.querySelector(`#${t}`),s=a.parentNode.querySelector("button");a.setAttribute("draggable",!1),a.classList.add("disabled-image"),s.disabled=!0})(o),t.removeEventListener("drop",s)};return{initializeBoardDOM:()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".opponent-board");e(t),e(a)},insertDraggedImage:s,rotateShipImage:e=>{const t=Array.from(e.classList);t.includes("horizontal")?(e.classList.remove("horizontal"),e.classList.add("vertical")):t.includes("vertical")&&(e.classList.remove("vertical"),e.classList.add("horizontal"))},rotateDraggedImage:e=>{const t=e.target.cloneNode(),a=document.createElement("div");a.classList.add("temp-rotate"),((e,t)=>{const a=Array.from(t.classList);a.includes("horizontal")?e.classList.add("temp-rotate-horizontal"):a.includes("vertical")&&(e.classList.add("temp-rotate-vertical"),"5"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-5"):"4"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-4"):"3"===t.dataset.shipLength?e.classList.add("temp-rotate-vertical-3"):"2"===t.dataset.shipLength&&e.classList.add("temp-rotate-vertical-2"))})(a,t),a.appendChild(t),document.body.appendChild(a),e.dataTransfer.setDragImage(a,0,0),setTimeout((()=>{document.body.removeChild(a)}),0)},getDraggedImage:e=>{const t={image:e.target.src,shipLength:e.target.dataset.shipLength,horizontal:!1,vertical:!1,elementID:e.target.getAttribute("id")};Array.from(e.target.classList).includes("horizontal")?t.horizontal=!0:Array.from(e.target.classList).includes("vertical")&&(t.vertical=!0),console.log(t);const a=JSON.stringify(t);e.dataTransfer.setData("image",a)},dragOver:t,addAttackResultDOM:(e,t,a)=>{const s=a[0],r=a[1];console.log(e),document.querySelector(`.${e}-board`).querySelector(`[data-row='${s}'][data-column='${r}']`).textContent=t}}})(),t=t=>{const s="human"!==t&&("computer"===t||void 0),r=(()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){e.push([]);for(let a=0;a<10;a++)e[t].push(void 0)}return e})(),t=[],a=[],s=[],r=[],o=[];let i=!1;const n=t=>e[t[0]][t[1]];return{getCoordinates:n,getPlacedShips:()=>t,getReceivedMissedShots:()=>a,getReceivedHitShots:()=>s,getSentMissedShots:()=>r,getSentHitShots:()=>o,isAllShipsSunk:()=>i,placeShip:(a,s)=>{for(const t of s)e[t[0]][t[1]]=a;t.push(a)},receiveAttack:e=>{const r=n(e);return void 0!==r?(r.hit(),t.every((e=>e.isSunk()))&&(i=!0),s.push(e),"hit"):(a.push(e),"miss")},addSentMissedShot:e=>{r.push(e)},addSentHitShot:e=>{o.push(e)}}})();let o;const i=()=>s,n=(e,t)=>{const a=(e=>{const t=e;let a=0,s=!1;return{getShipLength:()=>t,getShipHits:()=>a,isSunk:()=>s,hit:()=>{if(s)return"That ship has already been sunk!";a+=1,a===t&&(s=!0)}}})(e);r.placeShip(a,t)},d=t=>{const s=o.getGameboard(),n=o.receiveAttack(t);if("hit"===n){if(r.addSentHitShot(t),i()?i()&&e.addAttackResultDOM("player",n,t):e.addAttackResultDOM("opponent",n,t),s.isAllShipsSunk())return void a.endGame(o)}else"miss"===n&&(r.addSentMissedShot(t),i()?i()&&e.addAttackResultDOM("player",n,t):e.addAttackResultDOM("opponent",n,t));o.isComputer()&&o.sendComputerAttack()},l=e=>{let t=[];do{t=[];const a=c(),s=u(a,e);t.push(a),t=t.concat(s)}while(t.length<e);return t},c=()=>{const e=[void 0,void 0];do{e[0]=h(),e[1]=h()}while(void 0!==r.getCoordinates(e));return e},u=(e,t)=>{const a=[];if(m(e,t,"up")){const s=[];for(let a=1;a<t;a++)s.push([e[0]-a,e[1]]);a.push(s)}if(m(e,t,"right")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]+a]);a.push(s)}if(m(e,t,"down")){const s=[];for(let a=1;a<t;a++)s.push([e[0]+a,e[1]]);a.push(s)}if(m(e,t,"left")){const s=[];for(let a=1;a<t;a++)s.push([e[0],e[1]-a]);a.push(s)}return 0===a.length?a:a[Math.floor(Math.random()*a.length)]},h=()=>Math.floor(10*Math.random()),p=(e,t)=>e.some((e=>e[0]===t[0]&&e[1]===t[1])),m=(e,t,a)=>{switch(a){case"up":if(e[0]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]-a,e[1]]))return!1;return!0;case"right":if(e[1]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]+a]))return!1;return!0;case"down":if(e[0]+(t-1)>9)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0]+a,e[1]]))return!1;return!0;case"left":if(e[1]-(t-1)<0)return!1;for(let a=1;a<t;a++)if(void 0!==r.getCoordinates([e[0],e[1]-a]))return!1;return!0}};return{isComputer:i,getGameboard:()=>r,getOpposingPlayer:()=>o,setOpposingPlayer:e=>{o=e},addShipToGameboard:n,sendAttack:d,initializeComputerGameboard:()=>{if(!s)return;const e=[5,4,3,3,2];for(const t of e){const e=l(t);n(t,e)}},sendComputerAttack:()=>{if(!s)return;const e=(()=>{const e=o.getGameboard().getReceivedMissedShots(),t=o.getGameboard().getReceivedHitShots(),a=[void 0,void 0];do{a[0]=h(),a[1]=h()}while(p(e,a)||p(t,a));return a})();d(e)},receiveAttack:e=>r.receiveAttack(e),checkIfValidEmptyCoordinates:m}},a=(()=>{const e=[];let a,s=!0;return{getPlayers:()=>e,isInProgress:()=>s,getWinner:()=>a,createGame:()=>{const a=t("human");e.push(a);const s=t("computer");e.push(s),a.setOpposingPlayer(s),s.setOpposingPlayer(a),s.initializeComputerGameboard()},endGame:e=>{s=!1,(e=>{const t=e.getOpposingPlayer();a=t})(e)},resetGame:()=>{e.length=0,s=!0,a=void 0}}})(),s=()=>{document.querySelectorAll(".ship-placement").forEach((t=>{const a=t.children[0];t.children[2].addEventListener("click",(()=>{e.rotateShipImage(a)}))}))},r=()=>{Array.from(document.querySelectorAll(".ship-piece")).forEach((t=>{t.addEventListener("dragstart",(t=>{e.getDraggedImage(t),e.rotateDraggedImage(t)}))}))};a.createGame(),e.initializeBoardDOM(),s(),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU1ELEVBMkJ6QkUsVUExQmdCLElBQU1ILEVBMkJ0QkksV0F0QmlCLEtBQ2pCLE1BQU1DLEVBQWM1RSxFQUFPLFNBQzNCc0UsRUFBUTNHLEtBQUtpSCxHQUNiLE1BQU0zRSxFQUFpQkQsRUFBTyxZQUM5QnNFLEVBQVEzRyxLQUFLc0MsR0FDYjJFLEVBQVlYLGtCQUFrQmhFLEdBQzlCQSxFQUFlZ0Usa0JBQWtCVyxHQUNqQzNFLEVBQWVrRSw2QkFBNkIsRUFnQjVDM0IsUUFkZXFDLElBQ2ZMLEdBQWEsRUFkRyxDQUFDSyxJQUNqQixNQUFNQyxFQUFlRCxFQUFZYixvQkFDakNPLEVBQVNPLENBQVksRUFhckJDLENBQVVGLEVBQVksRUFhdEJHLFVBWGdCLEtBQ2hCVixFQUFRdkgsT0FBUyxFQUNqQnlILEdBQWEsRUFDYkQsT0FBU25FLENBQVMsRUFVckIsRUFyQ2dCLEdDRlg2RSxFQUM2QixLQUNEMUssU0FBUzJLLGlCQUFpQixtQkFDbENDLFNBQVNDLElBQzdCLE1BQU1DLEVBQU1ELEVBQU1FLFNBQVMsR0FDZkYsRUFBTUUsU0FBUyxHQUN2QmhLLGlCQUFpQixTQUFTLEtBQzVCdkIsRUFBYzBFLGdCQUFnQjRHLEVBQUksR0FDbEMsR0FDRixFQVRBSixFQVd5QixLQUNSaEssTUFBTUMsS0FBS1gsU0FBUzJLLGlCQUFpQixnQkFDN0NDLFNBQVMvRCxJQUNsQkEsRUFBSzlGLGlCQUFpQixhQUFjQyxJQUNsQ3hCLEVBQWN3RixnQkFBZ0JoRSxHQUM5QnhCLEVBQWM4RSxtQkFBbUJ0RCxFQUFNLEdBQ3ZDLEdBQ0YsRUNoQk5XLEVBQVN5SSxhQUVUNUssRUFBY3VFLHFCQUVkMkcsSUFFQUEsRyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9ET01fY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvcGxheWVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2dhbWVsb29wLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9ldmVudF9saXN0ZW5lcl9jb250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTaGlwID0gKGdpdmVuTGVuZ3RoKSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IGdpdmVuTGVuZ3RoO1xuICBsZXQgaGl0cyA9IDA7XG4gIGxldCBzdW5rID0gZmFsc2U7XG4gIGNvbnN0IGdldFNoaXBMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG4gIGNvbnN0IGdldFNoaXBIaXRzID0gKCkgPT4gaGl0cztcbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gc3VuaztcbiAgY29uc3QgY2hlY2tJZlN1bmsgPSAoKSA9PiB7XG4gICAgaWYgKGhpdHMgPT09IGxlbmd0aCkge1xuICAgICAgc3VuayA9IHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzdW5rKSB7XG4gICAgICBoaXRzICs9IDE7XG4gICAgICBjaGVja0lmU3VuaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJUaGF0IHNoaXAgaGFzIGFscmVhZHkgYmVlbiBzdW5rIVwiO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRTaGlwTGVuZ3RoLFxuICAgIGdldFNoaXBIaXRzLFxuICAgIGlzU3VuayxcbiAgICBoaXQsXG4gIH07XG59O1xuXG5leHBvcnQgeyBTaGlwIH07XG4iLCJpbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVsb29wXCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjcmVhdGVCb2FyZENlbGxzID0gKGdhbWVib2FyZERPTSkgPT4ge1xuICAgIGNvbnN0IEJPQVJEQVhFU0xFTkdUSCA9IDEwO1xuICAgIGNvbnN0IGNvbHVtbkxhYmVscyA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIl07XG4gICAgY29uc3Qgcm93TGFiZWxzID0gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiMTBcIl07XG4gICAgZm9yIChsZXQgaSA9IC0xOyBpIDwgQk9BUkRBWEVTTEVOR1RIOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8IEJPQVJEQVhFU0xFTkdUSDsgaisrKSB7XG4gICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZ2FtZWJvYXJkLWxhYmVsXCIpO1xuICAgICAgICAgICAgaW52aXNpYmxlUGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbkxhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBjb2x1bW5MYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbHVtbi1sYWJlbFwiKTtcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbHVtbkxhYmVsc1tqXTtcbiAgICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChjb2x1bW5MYWJlbEVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHJvd0xhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgcm93TGFiZWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJyb3ctbGFiZWxcIik7XG4gICAgICAgICAgcm93TGFiZWxFbGVtZW50LnRleHRDb250ZW50ID0gcm93TGFiZWxzW2ldO1xuICAgICAgICAgIGdhbWVib2FyZERPTS5hcHBlbmRDaGlsZChyb3dMYWJlbEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbnN0IGNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAvLyBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd1wiLCBpKTtcbiAgICAgICAgICAvLyBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbHVtblwiLCBqKTtcbiAgICAgICAgICAvLyBjZWxsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZ2FtZWJvYXJkLWNlbGxcIik7XG4gICAgICAgICAgLy8gY2VsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgIC8vICAgZHJhZ092ZXIoZXZlbnQpO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIC8vIGNlbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgIC8vICAgaW5zZXJ0RHJhZ2dlZEltYWdlKGV2ZW50KTtcbiAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICBpZiAoQXJyYXkuZnJvbShnYW1lYm9hcmRET00uY2xhc3NMaXN0KS5pbmNsdWRlcyhcInBsYXllci1ib2FyZFwiKSkge1xuICAgICAgICAgICAgY29uc3QgY2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1yb3dcIiwgaSk7XG4gICAgICAgICAgICBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbHVtblwiLCBqKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lYm9hcmQtY2VsbFwiKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZHJhZ092ZXIoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjZWxsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgaW5zZXJ0RHJhZ2dlZEltYWdlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGNlbGxFbGVtZW50KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgQXJyYXkuZnJvbShnYW1lYm9hcmRET00uY2xhc3NMaXN0KS5pbmNsdWRlcyhcIm9wcG9uZW50LWJvYXJkXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd1wiLCBpKTtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY29sdW1uXCIsIGopO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImdhbWVib2FyZC1jZWxsXCIpO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjZWxsRWxlbWVudCk7XG4gICAgICAgICAgICAgIGNvbnN0IGNlbGxSb3cgPSBOdW1iZXIoY2VsbEVsZW1lbnQuZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICBjb25zdCBjZWxsQ29sdW1uID0gTnVtYmVyKGNlbGxFbGVtZW50LmRhdGFzZXQuY29sdW1uKTtcbiAgICAgICAgICAgICAgR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdLnNlbmRBdHRhY2soW2NlbGxSb3csIGNlbGxDb2x1bW5dKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGNlbGxFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc29tZSBjbGljayBldmVudCBsaXN0ZW5lciB3aGVyZSBhdHRhY2sgaXMgbWFkZSBPUiBwcmlvciB0byB0aGF0LCBwbGFjaW5nIHNoaXAgb24gdGhhdCBjZWxsXG4gICAgICAgICAgLy8gZ2FtZWJvYXJkRE9NLmFwcGVuZENoaWxkKGNlbGxFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0RHJhZ2dlZEltYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgZGF0YU9iamVjdCA9IHtcbiAgICAgIGltYWdlOiBldmVudC50YXJnZXQuc3JjLFxuICAgICAgc2hpcExlbmd0aDogZXZlbnQudGFyZ2V0LmRhdGFzZXQuc2hpcExlbmd0aCxcbiAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgZWxlbWVudElEOiBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiaWRcIiksXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuZnJvbShldmVudC50YXJnZXQuY2xhc3NMaXN0KS5pbmNsdWRlcyhcImhvcml6b250YWxcIikpIHtcbiAgICAgIGRhdGFPYmplY3QuaG9yaXpvbnRhbCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QpLmluY2x1ZGVzKFwidmVydGljYWxcIikpIHtcbiAgICAgIGRhdGFPYmplY3QudmVydGljYWwgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhkYXRhT2JqZWN0KTtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YU9iamVjdCk7XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJpbWFnZVwiLCBkYXRhU3RyaW5nKTtcbiAgfTtcbiAgY29uc3QgZHJhZ092ZXIgPSAoKSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfTtcbiAgY29uc3QgaW5pdGlhbGl6ZUJvYXJkRE9NID0gKCkgPT4ge1xuICAgIGNvbnN0IGh1bWFuUGxheWVyR2FtZWJvYXJkRE9NID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXItYm9hcmRcIik7XG4gICAgY29uc3Qgb3Bwb25lbnRHYW1lYm9hcmRET00gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm9wcG9uZW50LWJvYXJkXCIpO1xuICAgIGNyZWF0ZUJvYXJkQ2VsbHMoaHVtYW5QbGF5ZXJHYW1lYm9hcmRET00pO1xuICAgIGNyZWF0ZUJvYXJkQ2VsbHMob3Bwb25lbnRHYW1lYm9hcmRET00pO1xuICB9O1xuICBjb25zdCBpc1ZhbGlkR2FtZWJvYXJkQ2VsbCA9ICh0YXJnZXRDZWxsLCBkYXRhT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgY2VsbENvb3JkaW5hdGVzID0gW1xuICAgICAgTnVtYmVyKHRhcmdldENlbGwuZGF0YXNldC5yb3cpLFxuICAgICAgTnVtYmVyKHRhcmdldENlbGwuZGF0YXNldC5jb2x1bW4pLFxuICAgIF07XG4gICAgY29uc3QgbGVuZ3RoID0gTnVtYmVyKGRhdGFPYmplY3Quc2hpcExlbmd0aCk7XG4gICAgaWYgKGRhdGFPYmplY3QuaG9yaXpvbnRhbCkge1xuICAgICAgaWYgKFxuICAgICAgICBHYW1lTG9vcC5nZXRQbGF5ZXJzKClbMF0uY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyhcbiAgICAgICAgICBjZWxsQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIFwicmlnaHRcIlxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmaXRzXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwibm9wZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGFPYmplY3QudmVydGljYWwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgR2FtZUxvb3AuZ2V0UGxheWVycygpWzBdLmNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoXG4gICAgICAgICAgY2VsbENvb3JkaW5hdGVzLFxuICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICBcImRvd25cIlxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmaXRzXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwibm9wZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFkZFNoaXBUb0RPTSA9ICh0YXJnZXRDZWxsLCBkYXRhT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgbGVuZ3RoID0gZGF0YU9iamVjdC5zaGlwTGVuZ3RoO1xuICAgIGNvbnN0IHRhcmdldENlbGxSb3cgPSBOdW1iZXIodGFyZ2V0Q2VsbC5kYXRhc2V0LnJvdyk7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbENvbHVtbiA9IE51bWJlcih0YXJnZXRDZWxsLmRhdGFzZXQuY29sdW1uKTtcbiAgICBjb25zdCBjb29yZGluYXRlc0FycmF5ID0gW1t0YXJnZXRDZWxsUm93LCB0YXJnZXRDZWxsQ29sdW1uXV07XG4gICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwiY29udGFpbnMtc2hpcC1pbWFnZVwiKTtcbiAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWltYWdlXCIpO1xuICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChgc2hpcC1pbWFnZS0ke2xlbmd0aH1gKTtcbiAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoYHNoaXAtaW1hZ2UtJHtsZW5ndGh9LTFgKTtcbiAgICBpZiAoZGF0YU9iamVjdC5ob3Jpem9udGFsKSB7XG4gICAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoXCJob3Jpem9udGFsXCIpO1xuICAgIH0gZWxzZSBpZiAoZGF0YU9iamVjdC52ZXJ0aWNhbCkge1xuICAgICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwidmVydGljYWxcIik7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCByZW1haW5pbmdDZWxsO1xuICAgICAgaWYgKGRhdGFPYmplY3QuaG9yaXpvbnRhbCkge1xuICAgICAgICByZW1haW5pbmdDZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBgLnBsYXllci1ib2FyZCBbZGF0YS1yb3c9JyR7dGFyZ2V0Q2VsbFJvd30nXVtkYXRhLWNvbHVtbj0nJHtcbiAgICAgICAgICAgIHRhcmdldENlbGxDb2x1bW4gKyBpXG4gICAgICAgICAgfSddYFxuICAgICAgICApO1xuICAgICAgICByZW1haW5pbmdDZWxsLmNsYXNzTGlzdC5hZGQoXCJob3Jpem9udGFsXCIpO1xuICAgICAgICBjb29yZGluYXRlc0FycmF5LnB1c2goW3RhcmdldENlbGxSb3csIHRhcmdldENlbGxDb2x1bW4gKyBpXSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGFPYmplY3QudmVydGljYWwpIHtcbiAgICAgICAgcmVtYWluaW5nQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgYC5wbGF5ZXItYm9hcmQgW2RhdGEtcm93PScke1xuICAgICAgICAgICAgdGFyZ2V0Q2VsbFJvdyArIGlcbiAgICAgICAgICB9J11bZGF0YS1jb2x1bW49JyR7dGFyZ2V0Q2VsbENvbHVtbn0nXWBcbiAgICAgICAgKTtcbiAgICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKFwidmVydGljYWxcIik7XG4gICAgICAgIGNvb3JkaW5hdGVzQXJyYXkucHVzaChbdGFyZ2V0Q2VsbFJvdyArIGksIHRhcmdldENlbGxDb2x1bW5dKTtcbiAgICAgIH1cbiAgICAgIHJlbWFpbmluZ0NlbGwuY2xhc3NMaXN0LmFkZChcImNvbnRhaW5zLXNoaXAtaW1hZ2VcIik7XG4gICAgICByZW1haW5pbmdDZWxsLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWltYWdlXCIpO1xuICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKGBzaGlwLWltYWdlLSR7bGVuZ3RofWApO1xuICAgICAgcmVtYWluaW5nQ2VsbC5jbGFzc0xpc3QuYWRkKGBzaGlwLWltYWdlLSR7bGVuZ3RofS0ke2kgKyAxfWApO1xuICAgIH1cbiAgICByZXR1cm4gY29vcmRpbmF0ZXNBcnJheTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZUltYWdlQnV0dG9uSW50ZXJhY3Rpb25zID0gKGRhdGFPYmplY3QpID0+IHtcbiAgICBjb25zdCBJRCA9IGRhdGFPYmplY3QuZWxlbWVudElEO1xuICAgIGNvbnN0IGltYWdlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke0lEfWApO1xuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBpbWFnZUVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uXCIpO1xuICAgIGltYWdlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIiwgZmFsc2UpO1xuICAgIGltYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWQtaW1hZ2VcIik7XG4gICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IGluc2VydERyYWdnZWRJbWFnZSA9IChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoQXJyYXkuZnJvbSh0YXJnZXRDZWxsLmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJjb250YWlucy1zaGlwLWltYWdlXCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcImltYWdlXCIpO1xuICAgIGNvbnN0IGRhdGFPYmplY3QgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpO1xuICAgIGlmICghaXNWYWxpZEdhbWVib2FyZENlbGwodGFyZ2V0Q2VsbCwgZGF0YU9iamVjdCkpIHtcbiAgICAgIC8vIHByb2JhYmx5IG1ha2Ugc29tZSBET00gZXJyb3IgbWVzc2FnZSBhcHBlYXJcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2hpcENvb3JkaW5hdGVzID0gYWRkU2hpcFRvRE9NKHRhcmdldENlbGwsIGRhdGFPYmplY3QpO1xuICAgIEdhbWVMb29wLmdldFBsYXllcnMoKVswXS5hZGRTaGlwVG9HYW1lYm9hcmQoXG4gICAgICBOdW1iZXIoZGF0YU9iamVjdC5zaGlwTGVuZ3RoKSxcbiAgICAgIHNoaXBDb29yZGluYXRlc1xuICAgICk7XG4gICAgZGlzYWJsZUltYWdlQnV0dG9uSW50ZXJhY3Rpb25zKGRhdGFPYmplY3QpO1xuICAgIHRhcmdldENlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgaW5zZXJ0RHJhZ2dlZEltYWdlKTtcbiAgfTtcbiAgY29uc3Qgcm90YXRlU2hpcEltYWdlID0gKGltYWdlKSA9PiB7XG4gICAgY29uc3QgaW1hZ2VDbGFzc2VzID0gQXJyYXkuZnJvbShpbWFnZS5jbGFzc0xpc3QpO1xuICAgIGlmIChpbWFnZUNsYXNzZXMuaW5jbHVkZXMoXCJob3Jpem9udGFsXCIpKSB7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaG9yaXpvbnRhbFwiKTtcbiAgICAgIGltYWdlLmNsYXNzTGlzdC5hZGQoXCJ2ZXJ0aWNhbFwiKTtcbiAgICB9IGVsc2UgaWYgKGltYWdlQ2xhc3Nlcy5pbmNsdWRlcyhcInZlcnRpY2FsXCIpKSB7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwidmVydGljYWxcIik7XG4gICAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbFwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJvdGF0ZVBlckxlbmd0aCA9ICh0ZW1wRGl2LCBjbG9uZWRJbWFnZUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBjbG9uZWRJbWFnZUVsZW1lbnRDbGFzc2VzID0gQXJyYXkuZnJvbShjbG9uZWRJbWFnZUVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICBpZiAoY2xvbmVkSW1hZ2VFbGVtZW50Q2xhc3Nlcy5pbmNsdWRlcyhcImhvcml6b250YWxcIikpIHtcbiAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLWhvcml6b250YWxcIik7XG4gICAgfSBlbHNlIGlmIChjbG9uZWRJbWFnZUVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidmVydGljYWxcIikpIHtcbiAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsXCIpO1xuICAgICAgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiNVwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTVcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiNFwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTRcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiM1wiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTNcIik7XG4gICAgICB9IGVsc2UgaWYgKGNsb25lZEltYWdlRWxlbWVudC5kYXRhc2V0LnNoaXBMZW5ndGggPT09IFwiMlwiKSB7XG4gICAgICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlLXZlcnRpY2FsLTJcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCByb3RhdGVEcmFnZ2VkSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY2xvbmVkSW1hZ2VFbGVtZW50ID0gaW1hZ2VFbGVtZW50LmNsb25lTm9kZSgpO1xuICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRlbXBEaXYuY2xhc3NMaXN0LmFkZChcInRlbXAtcm90YXRlXCIpO1xuICAgIHJvdGF0ZVBlckxlbmd0aCh0ZW1wRGl2LCBjbG9uZWRJbWFnZUVsZW1lbnQpO1xuICAgIHRlbXBEaXYuYXBwZW5kQ2hpbGQoY2xvbmVkSW1hZ2VFbGVtZW50KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXBEaXYpO1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UodGVtcERpdiwgMCwgMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRlbXBEaXYpO1xuICAgIH0sIDApO1xuICB9O1xuICBjb25zdCBhZGRBdHRhY2tSZXN1bHRET00gPSAocGxheWVyVHlwZSwgYXR0YWNrUmVzdWx0cywgY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBjZWxsUm93ID0gY29vcmRpbmF0ZXNbMF07XG4gICAgY29uc3QgY2VsbENvbHVtbiA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIGNvbnNvbGUubG9nKHBsYXllclR5cGUpO1xuICAgIGNvbnN0IGdhbWVib2FyZERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke3BsYXllclR5cGV9LWJvYXJkYCk7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IGdhbWVib2FyZERPTS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFtkYXRhLXJvdz0nJHtjZWxsUm93fSddW2RhdGEtY29sdW1uPScke2NlbGxDb2x1bW59J11gXG4gICAgKTtcbiAgICB0YXJnZXRDZWxsLnRleHRDb250ZW50ID0gYXR0YWNrUmVzdWx0cztcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpbml0aWFsaXplQm9hcmRET00sXG4gICAgaW5zZXJ0RHJhZ2dlZEltYWdlLFxuICAgIHJvdGF0ZVNoaXBJbWFnZSxcbiAgICByb3RhdGVEcmFnZ2VkSW1hZ2UsXG4gICAgZ2V0RHJhZ2dlZEltYWdlLFxuICAgIGRyYWdPdmVyLFxuICAgIGFkZEF0dGFja1Jlc3VsdERPTSxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXIgfTtcbiIsImltcG9ydCB7IFNoaXAgfSBmcm9tIFwiLi9zaGlwXCI7XG5pbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZWxvb3BcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuXG5jb25zdCBQbGF5ZXIgPSAocGxheWVyVHlwZSkgPT4ge1xuICBjb25zdCBkZXRlcm1pbmVQbGF5ZXJUeXBlID0gKCkgPT4ge1xuICAgIGlmIChwbGF5ZXJUeXBlID09PSBcImh1bWFuXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBsYXllclR5cGUgPT09IFwiY29tcHV0ZXJcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBjb21wdXRlclBsYXllciA9IGRldGVybWluZVBsYXllclR5cGUoKTtcbiAgY29uc3QgcGxheWVyR2FtZWJvYXJkID0gR2FtZWJvYXJkKCk7XG4gIGxldCBvcHBvc2luZ1BsYXllcjtcbiAgY29uc3QgaXNDb21wdXRlciA9ICgpID0+IGNvbXB1dGVyUGxheWVyO1xuICBjb25zdCBnZXRHYW1lYm9hcmQgPSAoKSA9PiBwbGF5ZXJHYW1lYm9hcmQ7XG4gIGNvbnN0IGdldE9wcG9zaW5nUGxheWVyID0gKCkgPT4gb3Bwb3NpbmdQbGF5ZXI7XG4gIGNvbnN0IHNldE9wcG9zaW5nUGxheWVyID0gKHBsYXllcikgPT4ge1xuICAgIG9wcG9zaW5nUGxheWVyID0gcGxheWVyO1xuICB9O1xuICBjb25zdCBhZGRTaGlwVG9HYW1lYm9hcmQgPSAoc2hpcExlbmd0aCwgY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBzaGlwID0gU2hpcChzaGlwTGVuZ3RoKTtcbiAgICBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAsIGNvb3JkaW5hdGVzKTtcbiAgfTtcbiAgY29uc3Qgc2VuZEF0dGFjayA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IG9wcG9zaW5nUGxheWVyR2FtZWJvYXJkID0gb3Bwb3NpbmdQbGF5ZXIuZ2V0R2FtZWJvYXJkKCk7XG4gICAgY29uc3QgYXR0YWNrUmVzdWx0cyA9IG9wcG9zaW5nUGxheWVyLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpO1xuICAgIGlmIChhdHRhY2tSZXN1bHRzID09PSBcImhpdFwiKSB7XG4gICAgICBwbGF5ZXJHYW1lYm9hcmQuYWRkU2VudEhpdFNob3QoY29vcmRpbmF0ZXMpO1xuICAgICAgaWYgKCFpc0NvbXB1dGVyKCkpIHtcbiAgICAgICAgRE9NQ29udHJvbGxlci5hZGRBdHRhY2tSZXN1bHRET00oXG4gICAgICAgICAgXCJvcHBvbmVudFwiLFxuICAgICAgICAgIGF0dGFja1Jlc3VsdHMsXG4gICAgICAgICAgY29vcmRpbmF0ZXNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNDb21wdXRlcigpKSB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuYWRkQXR0YWNrUmVzdWx0RE9NKFwicGxheWVyXCIsIGF0dGFja1Jlc3VsdHMsIGNvb3JkaW5hdGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHBvc2luZ1BsYXllckdhbWVib2FyZC5pc0FsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgIEdhbWVMb29wLmVuZEdhbWUob3Bwb3NpbmdQbGF5ZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhdHRhY2tSZXN1bHRzID09PSBcIm1pc3NcIikge1xuICAgICAgcGxheWVyR2FtZWJvYXJkLmFkZFNlbnRNaXNzZWRTaG90KGNvb3JkaW5hdGVzKTtcbiAgICAgIGlmICghaXNDb21wdXRlcigpKSB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuYWRkQXR0YWNrUmVzdWx0RE9NKFxuICAgICAgICAgIFwib3Bwb25lbnRcIixcbiAgICAgICAgICBhdHRhY2tSZXN1bHRzLFxuICAgICAgICAgIGNvb3JkaW5hdGVzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzQ29tcHV0ZXIoKSkge1xuICAgICAgICBET01Db250cm9sbGVyLmFkZEF0dGFja1Jlc3VsdERPTShcInBsYXllclwiLCBhdHRhY2tSZXN1bHRzLCBjb29yZGluYXRlcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHBvc2luZ1BsYXllci5pc0NvbXB1dGVyKCkpIHtcbiAgICAgIG9wcG9zaW5nUGxheWVyLnNlbmRDb21wdXRlckF0dGFjaygpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaW5pdGlhbGl6ZUNvbXB1dGVyR2FtZWJvYXJkID0gKCkgPT4ge1xuICAgIGlmICghY29tcHV0ZXJQbGF5ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGVuZ3Roc09mU2hpcHMgPSBbNSwgNCwgMywgMywgMl07XG4gICAgZm9yIChjb25zdCBzaGlwTGVuZ3RoIG9mIGxlbmd0aHNPZlNoaXBzKSB7XG4gICAgICBjb25zdCBzaGlwQ29vcmRpbmF0ZXMgPSBnZW5lcmF0ZUNvbXB1dGVyU2hpcENvb3JkaW5hdGVzKHNoaXBMZW5ndGgpO1xuICAgICAgYWRkU2hpcFRvR2FtZWJvYXJkKHNoaXBMZW5ndGgsIHNoaXBDb29yZGluYXRlcyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZW5kQ29tcHV0ZXJBdHRhY2sgPSAoKSA9PiB7XG4gICAgaWYgKCFjb21wdXRlclBsYXllcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdHRhY2tDb29yZGluYXRlcyA9IGdlbmVyYXRlQXR0YWNrQ29vcmRpbmF0ZXMoKTtcbiAgICBzZW5kQXR0YWNrKGF0dGFja0Nvb3JkaW5hdGVzKTtcbiAgfTtcbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IGF0dGFja1Jlc3VsdHMgPSBwbGF5ZXJHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZGluYXRlcyk7XG4gICAgcmV0dXJuIGF0dGFja1Jlc3VsdHM7XG4gIH07XG4gIGNvbnN0IGdlbmVyYXRlQ29tcHV0ZXJTaGlwQ29vcmRpbmF0ZXMgPSAoc2hpcExlbmd0aCkgPT4ge1xuICAgIGxldCBsaXN0T2ZDb29yZGluYXRlcyA9IFtdO1xuICAgIGRvIHtcbiAgICAgIGxpc3RPZkNvb3JkaW5hdGVzID0gW107XG4gICAgICBjb25zdCBzdGFydGluZ0Nvb3JkaW5hdGVzID0gZ2VuZXJhdGVTdGFydGluZ0Nvb3JkaW5hdGVzKCk7XG4gICAgICBjb25zdCBub25TdGFydGluZ0Nvb3JkaW5hdGVzID0gZ2VuZXJhdGVOb25TdGFydGluZ0Nvb3JkaW5hdGVzKFxuICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzLFxuICAgICAgICBzaGlwTGVuZ3RoXG4gICAgICApO1xuICAgICAgbGlzdE9mQ29vcmRpbmF0ZXMucHVzaChzdGFydGluZ0Nvb3JkaW5hdGVzKTtcbiAgICAgIGxpc3RPZkNvb3JkaW5hdGVzID0gbGlzdE9mQ29vcmRpbmF0ZXMuY29uY2F0KG5vblN0YXJ0aW5nQ29vcmRpbmF0ZXMpO1xuICAgIH0gd2hpbGUgKGxpc3RPZkNvb3JkaW5hdGVzLmxlbmd0aCA8IHNoaXBMZW5ndGgpO1xuICAgIHJldHVybiBsaXN0T2ZDb29yZGluYXRlcztcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVTdGFydGluZ0Nvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0aW5nQ29vcmRpbmF0ZXMgPSBbdW5kZWZpbmVkLCB1bmRlZmluZWRdO1xuICAgIGRvIHtcbiAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gPSBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUoKTtcbiAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gPSBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUoKTtcbiAgICB9IHdoaWxlIChwbGF5ZXJHYW1lYm9hcmQuZ2V0Q29vcmRpbmF0ZXMoc3RhcnRpbmdDb29yZGluYXRlcykgIT09IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIHN0YXJ0aW5nQ29vcmRpbmF0ZXM7XG4gIH07XG4gIGNvbnN0IGdlbmVyYXRlTm9uU3RhcnRpbmdDb29yZGluYXRlcyA9IChzdGFydGluZ0Nvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgcG9zc2libGVDb29yZGluYXRlcyA9IFtdO1xuICAgIGlmIChjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzKHN0YXJ0aW5nQ29vcmRpbmF0ZXMsIHNoaXBMZW5ndGgsIFwidXBcIikpIHtcbiAgICAgIGNvbnN0IHVwQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVwQ29vcmRpbmF0ZXMucHVzaChbXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSAtIGksXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICBwb3NzaWJsZUNvb3JkaW5hdGVzLnB1c2godXBDb29yZGluYXRlcyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoc3RhcnRpbmdDb29yZGluYXRlcywgc2hpcExlbmd0aCwgXCJyaWdodFwiKVxuICAgICkge1xuICAgICAgY29uc3QgcmlnaHRDb29yZGluYXRlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmlnaHRDb29yZGluYXRlcy5wdXNoKFtcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gKyBpLFxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIHBvc3NpYmxlQ29vcmRpbmF0ZXMucHVzaChyaWdodENvb3JkaW5hdGVzKTtcbiAgICB9XG4gICAgaWYgKGNoZWNrSWZWYWxpZEVtcHR5Q29vcmRpbmF0ZXMoc3RhcnRpbmdDb29yZGluYXRlcywgc2hpcExlbmd0aCwgXCJkb3duXCIpKSB7XG4gICAgICBjb25zdCBkb3duQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRvd25Db29yZGluYXRlcy5wdXNoKFtcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzBdICsgaSxcbiAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdLFxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIHBvc3NpYmxlQ29vcmRpbmF0ZXMucHVzaChkb3duQ29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgICBpZiAoY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyhzdGFydGluZ0Nvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoLCBcImxlZnRcIikpIHtcbiAgICAgIGNvbnN0IGxlZnRDb29yZGluYXRlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVmdENvb3JkaW5hdGVzLnB1c2goW1xuICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1sxXSAtIGksXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcG9zc2libGVDb29yZGluYXRlcy5wdXNoKGxlZnRDb29yZGluYXRlcyk7XG4gICAgfVxuICAgIGlmIChwb3NzaWJsZUNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHBvc3NpYmxlQ29vcmRpbmF0ZXM7XG4gICAgfVxuICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVDb29yZGluYXRlcy5sZW5ndGgpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvb3JkaW5hdGVzW3JhbmRvbUluZGV4XTtcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IEJPQVJEQVhFU0xFTkdUSCA9IDEwO1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBCT0FSREFYRVNMRU5HVEgpO1xuICB9O1xuICBjb25zdCBjaGVja0lmUHJldmlvdXNseUF0dGFja2VkID0gKFxuICAgIG9wcG9zaW5nUGxheWVyUmVjZWl2ZWRTaG90cyxcbiAgICBhdHRhY2tDb29yZGluYXRlc1xuICApID0+XG4gICAgb3Bwb3NpbmdQbGF5ZXJSZWNlaXZlZFNob3RzLnNvbWUoXG4gICAgICAocmVjZWl2ZWRTaG90KSA9PlxuICAgICAgICByZWNlaXZlZFNob3RbMF0gPT09IGF0dGFja0Nvb3JkaW5hdGVzWzBdICYmXG4gICAgICAgIHJlY2VpdmVkU2hvdFsxXSA9PT0gYXR0YWNrQ29vcmRpbmF0ZXNbMV1cbiAgICApO1xuICBjb25zdCBnZW5lcmF0ZUF0dGFja0Nvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlY2VpdmVkTWlzc2VkU2hvdHMgPSBvcHBvc2luZ1BsYXllclxuICAgICAgLmdldEdhbWVib2FyZCgpXG4gICAgICAuZ2V0UmVjZWl2ZWRNaXNzZWRTaG90cygpO1xuICAgIGNvbnN0IHJlY2VpdmVkSGl0U2hvdHMgPSBvcHBvc2luZ1BsYXllclxuICAgICAgLmdldEdhbWVib2FyZCgpXG4gICAgICAuZ2V0UmVjZWl2ZWRIaXRTaG90cygpO1xuICAgIGNvbnN0IGF0dGFja0Nvb3JkaW5hdGVzID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgICBkbyB7XG4gICAgICBhdHRhY2tDb29yZGluYXRlc1swXSA9IGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZSgpO1xuICAgICAgYXR0YWNrQ29vcmRpbmF0ZXNbMV0gPSBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGUoKTtcbiAgICB9IHdoaWxlIChcbiAgICAgIGNoZWNrSWZQcmV2aW91c2x5QXR0YWNrZWQocmVjZWl2ZWRNaXNzZWRTaG90cywgYXR0YWNrQ29vcmRpbmF0ZXMpIHx8XG4gICAgICBjaGVja0lmUHJldmlvdXNseUF0dGFja2VkKHJlY2VpdmVkSGl0U2hvdHMsIGF0dGFja0Nvb3JkaW5hdGVzKVxuICAgICk7XG4gICAgcmV0dXJuIGF0dGFja0Nvb3JkaW5hdGVzO1xuICB9O1xuICBjb25zdCBjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzID0gKFxuICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXMsXG4gICAgc2hpcExlbmd0aCxcbiAgICBkaXJlY3Rpb25cbiAgKSA9PiB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJ1cFwiOlxuICAgICAgICBpZiAoc3RhcnRpbmdDb29yZGluYXRlc1swXSAtIChzaGlwTGVuZ3RoIC0gMSkgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcGxheWVyR2FtZWJvYXJkLmdldENvb3JkaW5hdGVzKFtcbiAgICAgICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlc1swXSAtIGksXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0sXG4gICAgICAgICAgICBdKSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gKyAoc2hpcExlbmd0aCAtIDEpID4gOSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gKyBpLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSBcImRvd25cIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gKyAoc2hpcExlbmd0aCAtIDEpID4gOSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0gKyBpLFxuICAgICAgICAgICAgICBzdGFydGluZ0Nvb3JkaW5hdGVzWzFdLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gLSAoc2hpcExlbmd0aCAtIDEpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsYXllckdhbWVib2FyZC5nZXRDb29yZGluYXRlcyhbXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZXNbMV0gLSBpLFxuICAgICAgICAgICAgXSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGlzQ29tcHV0ZXIsXG4gICAgZ2V0R2FtZWJvYXJkLFxuICAgIGdldE9wcG9zaW5nUGxheWVyLFxuICAgIHNldE9wcG9zaW5nUGxheWVyLFxuICAgIGFkZFNoaXBUb0dhbWVib2FyZCxcbiAgICBzZW5kQXR0YWNrLFxuICAgIGluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCxcbiAgICBzZW5kQ29tcHV0ZXJBdHRhY2ssXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBjaGVja0lmVmFsaWRFbXB0eUNvb3JkaW5hdGVzLFxuICB9O1xufTtcblxuZXhwb3J0IHsgUGxheWVyIH07XG4iLCJjb25zdCBHYW1lYm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZUJvYXJkID0gKCkgPT4ge1xuICAgIGNvbnN0IGJvYXJkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBib2FyZC5wdXNoKFtdKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBib2FyZFtpXS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBib2FyZDtcbiAgfTtcbiAgY29uc3QgYm9hcmQgPSBjcmVhdGVCb2FyZCgpO1xuICBjb25zdCBwbGFjZWRTaGlwcyA9IFtdO1xuICBjb25zdCByZWNlaXZlZE1pc3NlZFNob3RzID0gW107XG4gIGNvbnN0IHJlY2VpdmVkSGl0U2hvdHMgPSBbXTtcbiAgY29uc3Qgc2VudE1pc3NlZFNob3RzID0gW107XG4gIGNvbnN0IHNlbnRIaXRTaG90cyA9IFtdO1xuICBsZXQgYWxsU2hpcHNTdW5rID0gZmFsc2U7XG4gIGNvbnN0IGdldENvb3JkaW5hdGVzID0gKGNvb3JkaW5hdGVzKSA9PiBib2FyZFtjb29yZGluYXRlc1swXV1bY29vcmRpbmF0ZXNbMV1dO1xuICBjb25zdCBnZXRQbGFjZWRTaGlwcyA9ICgpID0+IHBsYWNlZFNoaXBzO1xuICBjb25zdCBnZXRSZWNlaXZlZE1pc3NlZFNob3RzID0gKCkgPT4gcmVjZWl2ZWRNaXNzZWRTaG90cztcbiAgY29uc3QgZ2V0UmVjZWl2ZWRIaXRTaG90cyA9ICgpID0+IHJlY2VpdmVkSGl0U2hvdHM7XG4gIGNvbnN0IGdldFNlbnRNaXNzZWRTaG90cyA9ICgpID0+IHNlbnRNaXNzZWRTaG90cztcbiAgY29uc3QgZ2V0U2VudEhpdFNob3RzID0gKCkgPT4gc2VudEhpdFNob3RzO1xuICBjb25zdCBpc0FsbFNoaXBzU3VuayA9ICgpID0+IGFsbFNoaXBzU3VuaztcbiAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXAsIGNvb3JkaW5hdGVzTGlzdCkgPT4ge1xuICAgIGZvciAoY29uc3QgY29vcmRpbmF0ZXMgb2YgY29vcmRpbmF0ZXNMaXN0KSB7XG4gICAgICBib2FyZFtjb29yZGluYXRlc1swXV1bY29vcmRpbmF0ZXNbMV1dID0gc2hpcDtcbiAgICB9XG4gICAgcGxhY2VkU2hpcHMucHVzaChzaGlwKTtcbiAgfTtcbiAgY29uc3QgY2hlY2tBbGxTaGlwc1N1bmsgPSAoKSA9PiB7XG4gICAgaWYgKHBsYWNlZFNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKSkge1xuICAgICAgYWxsU2hpcHNTdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBlbnRpdHlBdENvb3JkaW5hdGVzID0gZ2V0Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpO1xuICAgIGlmIChlbnRpdHlBdENvb3JkaW5hdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVudGl0eUF0Q29vcmRpbmF0ZXMuaGl0KCk7XG4gICAgICBjaGVja0FsbFNoaXBzU3VuaygpO1xuICAgICAgcmVjZWl2ZWRIaXRTaG90cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICAgIHJldHVybiBcImhpdFwiO1xuICAgIH1cbiAgICByZWNlaXZlZE1pc3NlZFNob3RzLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgIHJldHVybiBcIm1pc3NcIjtcbiAgfTtcbiAgY29uc3QgYWRkU2VudE1pc3NlZFNob3QgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBzZW50TWlzc2VkU2hvdHMucHVzaChjb29yZGluYXRlcyk7XG4gIH07XG4gIGNvbnN0IGFkZFNlbnRIaXRTaG90ID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgc2VudEhpdFNob3RzLnB1c2goY29vcmRpbmF0ZXMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldENvb3JkaW5hdGVzLFxuICAgIGdldFBsYWNlZFNoaXBzLFxuICAgIGdldFJlY2VpdmVkTWlzc2VkU2hvdHMsXG4gICAgZ2V0UmVjZWl2ZWRIaXRTaG90cyxcbiAgICBnZXRTZW50TWlzc2VkU2hvdHMsXG4gICAgZ2V0U2VudEhpdFNob3RzLFxuICAgIGlzQWxsU2hpcHNTdW5rLFxuICAgIHBsYWNlU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIGFkZFNlbnRNaXNzZWRTaG90LFxuICAgIGFkZFNlbnRIaXRTaG90LFxuICB9O1xufTtcblxuZXhwb3J0IHsgR2FtZWJvYXJkIH07XG4iLCJpbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vc2hpcFwiO1xuaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuY29uc3QgR2FtZUxvb3AgPSAoKCkgPT4ge1xuICBjb25zdCBwbGF5ZXJzID0gW107XG4gIGxldCBpblByb2dyZXNzID0gdHJ1ZTtcbiAgbGV0IHdpbm5lcjtcbiAgY29uc3QgZ2V0UGxheWVycyA9ICgpID0+IHBsYXllcnM7XG4gIGNvbnN0IGlzSW5Qcm9ncmVzcyA9ICgpID0+IGluUHJvZ3Jlc3M7XG4gIGNvbnN0IGdldFdpbm5lciA9ICgpID0+IHdpbm5lcjtcbiAgY29uc3Qgc2V0V2lubmVyID0gKGxvc2VyUGxheWVyKSA9PiB7XG4gICAgY29uc3Qgd2lubmVyUGxheWVyID0gbG9zZXJQbGF5ZXIuZ2V0T3Bwb3NpbmdQbGF5ZXIoKTtcbiAgICB3aW5uZXIgPSB3aW5uZXJQbGF5ZXI7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUdhbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgaHVtYW5QbGF5ZXIgPSBQbGF5ZXIoXCJodW1hblwiKTtcbiAgICBwbGF5ZXJzLnB1c2goaHVtYW5QbGF5ZXIpO1xuICAgIGNvbnN0IGNvbXB1dGVyUGxheWVyID0gUGxheWVyKFwiY29tcHV0ZXJcIik7XG4gICAgcGxheWVycy5wdXNoKGNvbXB1dGVyUGxheWVyKTtcbiAgICBodW1hblBsYXllci5zZXRPcHBvc2luZ1BsYXllcihjb21wdXRlclBsYXllcik7XG4gICAgY29tcHV0ZXJQbGF5ZXIuc2V0T3Bwb3NpbmdQbGF5ZXIoaHVtYW5QbGF5ZXIpO1xuICAgIGNvbXB1dGVyUGxheWVyLmluaXRpYWxpemVDb21wdXRlckdhbWVib2FyZCgpO1xuICB9O1xuICBjb25zdCBlbmRHYW1lID0gKGxvc2VyUGxheWVyKSA9PiB7XG4gICAgaW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHNldFdpbm5lcihsb3NlclBsYXllcik7XG4gIH07XG4gIGNvbnN0IHJlc2V0R2FtZSA9ICgpID0+IHtcbiAgICBwbGF5ZXJzLmxlbmd0aCA9IDA7XG4gICAgaW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgd2lubmVyID0gdW5kZWZpbmVkO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFBsYXllcnMsXG4gICAgaXNJblByb2dyZXNzLFxuICAgIGdldFdpbm5lcixcbiAgICBjcmVhdGVHYW1lLFxuICAgIGVuZEdhbWUsXG4gICAgcmVzZXRHYW1lLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IHsgR2FtZUxvb3AgfTtcbiIsImltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuXG5jb25zdCBFdmVudExpc3RlbmVyQ29udHJvbGxlciA9ICgoKSA9PiB7XG4gIGNvbnN0IHJvdGF0ZVNoaXBJbWFnZUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwUGxhY2VtZW50RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXAtcGxhY2VtZW50XCIpO1xuICAgIHNoaXBQbGFjZW1lbnRFbGVtZW50cy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgY29uc3QgaW1nID0gZ3JvdXAuY2hpbGRyZW5bMF07XG4gICAgICBjb25zdCBidG4gPSBncm91cC5jaGlsZHJlblsyXTtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBET01Db250cm9sbGVyLnJvdGF0ZVNoaXBJbWFnZShpbWcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFkZFNoaXBQbGFjZW1lbnREcmFnID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBJbWFnZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hpcC1waWVjZVwiKSk7XG4gICAgc2hpcEltYWdlcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBzaGlwLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIERPTUNvbnRyb2xsZXIuZ2V0RHJhZ2dlZEltYWdlKGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlci5yb3RhdGVEcmFnZ2VkSW1hZ2UoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgcm90YXRlU2hpcEltYWdlTGlzdGVuZXJzLFxuICAgIGFkZFNoaXBQbGFjZW1lbnREcmFnLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IHsgRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIgfTtcbiIsImltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZWxvb3BcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlclwiO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ldmVudF9saXN0ZW5lcl9jb250cm9sbGVyXCI7XG5cbkdhbWVMb29wLmNyZWF0ZUdhbWUoKTtcblxuRE9NQ29udHJvbGxlci5pbml0aWFsaXplQm9hcmRET00oKTtcblxuRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIucm90YXRlU2hpcEltYWdlTGlzdGVuZXJzKCk7XG5cbkV2ZW50TGlzdGVuZXJDb250cm9sbGVyLmFkZFNoaXBQbGFjZW1lbnREcmFnKCk7XG4iXSwibmFtZXMiOlsiRE9NQ29udHJvbGxlciIsImNyZWF0ZUJvYXJkQ2VsbHMiLCJnYW1lYm9hcmRET00iLCJjb2x1bW5MYWJlbHMiLCJyb3dMYWJlbHMiLCJpIiwiaiIsImludmlzaWJsZVBsYWNlaG9sZGVyRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImFwcGVuZENoaWxkIiwiY29sdW1uTGFiZWxFbGVtZW50IiwidGV4dENvbnRlbnQiLCJyb3dMYWJlbEVsZW1lbnQiLCJBcnJheSIsImZyb20iLCJpbmNsdWRlcyIsImNlbGxFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZHJhZ092ZXIiLCJpbnNlcnREcmFnZ2VkSW1hZ2UiLCJjb25zb2xlIiwibG9nIiwiY2VsbFJvdyIsIk51bWJlciIsImRhdGFzZXQiLCJyb3ciLCJjZWxsQ29sdW1uIiwiY29sdW1uIiwiR2FtZUxvb3AiLCJnZXRQbGF5ZXJzIiwic2VuZEF0dGFjayIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0Q2VsbCIsInRhcmdldCIsImRhdGFTdHJpbmciLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZGF0YU9iamVjdCIsIkpTT04iLCJwYXJzZSIsImNlbGxDb29yZGluYXRlcyIsImxlbmd0aCIsInNoaXBMZW5ndGgiLCJob3Jpem9udGFsIiwiY2hlY2tJZlZhbGlkRW1wdHlDb29yZGluYXRlcyIsInZlcnRpY2FsIiwiaXNWYWxpZEdhbWVib2FyZENlbGwiLCJzaGlwQ29vcmRpbmF0ZXMiLCJ0YXJnZXRDZWxsUm93IiwidGFyZ2V0Q2VsbENvbHVtbiIsImNvb3JkaW5hdGVzQXJyYXkiLCJyZW1haW5pbmdDZWxsIiwicXVlcnlTZWxlY3RvciIsInB1c2giLCJhZGRTaGlwVG9ET00iLCJhZGRTaGlwVG9HYW1lYm9hcmQiLCJJRCIsImVsZW1lbnRJRCIsImltYWdlRWxlbWVudCIsImJ1dHRvbkVsZW1lbnQiLCJwYXJlbnROb2RlIiwiZGlzYWJsZWQiLCJkaXNhYmxlSW1hZ2VCdXR0b25JbnRlcmFjdGlvbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5pdGlhbGl6ZUJvYXJkRE9NIiwiaHVtYW5QbGF5ZXJHYW1lYm9hcmRET00iLCJvcHBvbmVudEdhbWVib2FyZERPTSIsInJvdGF0ZVNoaXBJbWFnZSIsImltYWdlIiwiaW1hZ2VDbGFzc2VzIiwicmVtb3ZlIiwicm90YXRlRHJhZ2dlZEltYWdlIiwiY2xvbmVkSW1hZ2VFbGVtZW50IiwiY2xvbmVOb2RlIiwidGVtcERpdiIsImNsb25lZEltYWdlRWxlbWVudENsYXNzZXMiLCJyb3RhdGVQZXJMZW5ndGgiLCJib2R5Iiwic2V0RHJhZ0ltYWdlIiwic2V0VGltZW91dCIsInJlbW92ZUNoaWxkIiwiZ2V0RHJhZ2dlZEltYWdlIiwic3JjIiwiZ2V0QXR0cmlidXRlIiwic3RyaW5naWZ5Iiwic2V0RGF0YSIsImFkZEF0dGFja1Jlc3VsdERPTSIsInBsYXllclR5cGUiLCJhdHRhY2tSZXN1bHRzIiwiY29vcmRpbmF0ZXMiLCJQbGF5ZXIiLCJjb21wdXRlclBsYXllciIsInBsYXllckdhbWVib2FyZCIsImJvYXJkIiwidW5kZWZpbmVkIiwiY3JlYXRlQm9hcmQiLCJwbGFjZWRTaGlwcyIsInJlY2VpdmVkTWlzc2VkU2hvdHMiLCJyZWNlaXZlZEhpdFNob3RzIiwic2VudE1pc3NlZFNob3RzIiwic2VudEhpdFNob3RzIiwiYWxsU2hpcHNTdW5rIiwiZ2V0Q29vcmRpbmF0ZXMiLCJnZXRQbGFjZWRTaGlwcyIsImdldFJlY2VpdmVkTWlzc2VkU2hvdHMiLCJnZXRSZWNlaXZlZEhpdFNob3RzIiwiZ2V0U2VudE1pc3NlZFNob3RzIiwiZ2V0U2VudEhpdFNob3RzIiwiaXNBbGxTaGlwc1N1bmsiLCJwbGFjZVNoaXAiLCJzaGlwIiwiY29vcmRpbmF0ZXNMaXN0IiwicmVjZWl2ZUF0dGFjayIsImVudGl0eUF0Q29vcmRpbmF0ZXMiLCJoaXQiLCJldmVyeSIsImlzU3VuayIsImFkZFNlbnRNaXNzZWRTaG90IiwiYWRkU2VudEhpdFNob3QiLCJHYW1lYm9hcmQiLCJvcHBvc2luZ1BsYXllciIsImlzQ29tcHV0ZXIiLCJnaXZlbkxlbmd0aCIsImhpdHMiLCJzdW5rIiwiZ2V0U2hpcExlbmd0aCIsImdldFNoaXBIaXRzIiwiU2hpcCIsIm9wcG9zaW5nUGxheWVyR2FtZWJvYXJkIiwiZ2V0R2FtZWJvYXJkIiwiZW5kR2FtZSIsInNlbmRDb21wdXRlckF0dGFjayIsImdlbmVyYXRlQ29tcHV0ZXJTaGlwQ29vcmRpbmF0ZXMiLCJsaXN0T2ZDb29yZGluYXRlcyIsInN0YXJ0aW5nQ29vcmRpbmF0ZXMiLCJnZW5lcmF0ZVN0YXJ0aW5nQ29vcmRpbmF0ZXMiLCJub25TdGFydGluZ0Nvb3JkaW5hdGVzIiwiZ2VuZXJhdGVOb25TdGFydGluZ0Nvb3JkaW5hdGVzIiwiY29uY2F0IiwiZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlIiwicG9zc2libGVDb29yZGluYXRlcyIsInVwQ29vcmRpbmF0ZXMiLCJyaWdodENvb3JkaW5hdGVzIiwiZG93bkNvb3JkaW5hdGVzIiwibGVmdENvb3JkaW5hdGVzIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2hlY2tJZlByZXZpb3VzbHlBdHRhY2tlZCIsIm9wcG9zaW5nUGxheWVyUmVjZWl2ZWRTaG90cyIsImF0dGFja0Nvb3JkaW5hdGVzIiwic29tZSIsInJlY2VpdmVkU2hvdCIsImRpcmVjdGlvbiIsImdldE9wcG9zaW5nUGxheWVyIiwic2V0T3Bwb3NpbmdQbGF5ZXIiLCJwbGF5ZXIiLCJpbml0aWFsaXplQ29tcHV0ZXJHYW1lYm9hcmQiLCJsZW5ndGhzT2ZTaGlwcyIsImdlbmVyYXRlQXR0YWNrQ29vcmRpbmF0ZXMiLCJwbGF5ZXJzIiwid2lubmVyIiwiaW5Qcm9ncmVzcyIsImlzSW5Qcm9ncmVzcyIsImdldFdpbm5lciIsImNyZWF0ZUdhbWUiLCJodW1hblBsYXllciIsImxvc2VyUGxheWVyIiwid2lubmVyUGxheWVyIiwic2V0V2lubmVyIiwicmVzZXRHYW1lIiwiRXZlbnRMaXN0ZW5lckNvbnRyb2xsZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImdyb3VwIiwiaW1nIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9